{
  "address": "0x523b4e6BAEdFD92fF6feD850CEF9636a41481D29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "burnAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cancelFee_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "market_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxReleaseAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "initialBondPriceIndex_",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "MangoError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bonus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondedAmount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseBond",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "availableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "bonus",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "spentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "canceledAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondPool.BondInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "bondInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "bonus",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "spentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "canceledAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondPool.BondInfo[]",
          "name": "infos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "breakBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "changeAvailableBonusRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newSampleSize",
          "type": "uint16"
        }
      ],
      "name": "changePriceSampleSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "cloberMarketSwapCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "spentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "bonus",
          "type": "uint8"
        }
      ],
      "name": "expectedBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBasisPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBasisPriceIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "priceIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialBondPriceIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "minBonus_",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "maxBonus_",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "startAt_",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "sampleSize_",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRecordedReleasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastReleasedAt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBonus",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxReleaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBonus",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "ownersOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondPool.BondOwner[]",
          "name": "owners",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "spentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "bonus",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "limitPriceIndex",
          "type": "uint16"
        }
      ],
      "name": "purchaseBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newReleasedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sampleSize",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soldAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "unaccountedClaimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawExceededUnderlyingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawLostERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa126a05a3e7093f6b72e65b7c0af18790956c1207163673540b14148bd8b6384",
  "receipt": {
    "to": null,
    "from": "0x62e5E8D25c88D9c4b67f09c46D96C9ECD3864757",
    "contractAddress": "0x523b4e6BAEdFD92fF6feD850CEF9636a41481D29",
    "transactionIndex": 0,
    "gasUsed": "4076432",
    "logsBloom": "0x
    "blockHash": "0x4126a6f2ed77db83f16fb221ad95f8ed8029550b737ebd6f1f52718cedf1d643",
    "transactionHash": "0xa126a05a3e7093f6b72e65b7c0af18790956c1207163673540b14148bd8b6384",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4544712,
        "transactionHash": "0xa126a05a3e7093f6b72e65b7c0af18790956c1207163673540b14148bd8b6384",
        "address": "0x523b4e6BAEdFD92fF6feD850CEF9636a41481D29",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000062e5e8d25c88d9c4b67f09c46d96c9ecd3864757"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4126a6f2ed77db83f16fb221ad95f8ed8029550b737ebd6f1f52718cedf1d643"
      }
    ],
    "blockNumber": 4544712,
    "cumulativeGasUsed": "4076432",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4eA8496D4D1d4EcF6eD6DaeA95D1A0856F8A5177",
    "0x000000000000000000000000000000000000dEaD",
    "0x1fA03eDB1B8839a5319A7D2c1Ae6AAE492342bAD",
    0,
    "0x1FC38BA10E741F357b1c8B69DC08eA654c21Ae37",
    "92592592592592592592",
    "4000000000000000000000000000",
    220
  ],
  "numDeployments": 3,
  "solcInputHash": "113e1522c1b0400ad151b287e252a915",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cancelFee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"market_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReleaseAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"initialBondPriceIndex_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"MangoError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bonus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondedAmount\",\"type\":\"uint256\"}],\"name\":\"PurchaseBond\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"bondInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"bonus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canceledAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondPool.BondInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"bondInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"bonus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canceledAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondPool.BondInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"breakBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"changeAvailableBonusRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newSampleSize\",\"type\":\"uint16\"}],\"name\":\"changePriceSampleSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"cloberMarketSwapCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bonus\",\"type\":\"uint8\"}],\"name\":\"expectedBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasisPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasisPriceIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBondPriceIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minBonus_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxBonus_\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"startAt_\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"sampleSize_\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecordedReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReleasedAt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"ownersOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondPool.BondOwner[]\",\"name\":\"owners\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bonus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitPriceIndex\",\"type\":\"uint16\"}],\"name\":\"purchaseBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newReleasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"unaccountedClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawExceededUnderlyingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawLostERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MangoBondPool.sol\":\"MangoBondPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    error MangoError(uint256 errorCode);\\n\\n    uint256 public constant ACCESS = 0;\\n    uint256 public constant PAUSED = 1;\\n    uint256 public constant REENTRANCY = 2;\\n    uint256 public constant INSUFFICIENT_BALANCE = 3;\\n    uint256 public constant EXCEEDED_BALANCE = 4;\\n    uint256 public constant SLIPPAGE = 5;\\n    uint256 public constant AMOUNT_TOO_SMALL = 6;\\n    uint256 public constant INVALID_ADDRESS = 7;\\n    uint256 public constant INVALID_TIME = 8;\\n    uint256 public constant INVALID_FEE = 9;\\n    uint256 public constant INVALID_BONUS = 10;\\n}\\n\",\"keccak256\":\"0x503efb79fbac2341d34158887d870049d9c45cccf1235e7bfd86ea398cf9ba9c\",\"license\":\"MIT\"},\"contracts/MangoBondPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./clober/CloberOrderBook.sol\\\";\\nimport \\\"./clober/CloberOrderKey.sol\\\";\\nimport \\\"./clober/CloberOrderNFT.sol\\\";\\nimport \\\"./interfaces/IBondPool.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./clober/CloberMarketSwapCallbackReceiver.sol\\\";\\nimport \\\"./utils/Pausable.sol\\\";\\n\\ncontract MangoBondPool is\\n    IBondPool,\\n    Initializable,\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    CloberMarketSwapCallbackReceiver\\n{\\n    using SafeERC20 for IERC20;\\n    uint256 private constant _FEE_PRECISION = 10 ** 6;\\n\\n    ITreasury private immutable _treasury;\\n    address public immutable override burnAddress;\\n    address public immutable override underlyingToken;\\n    address public immutable override quoteToken;\\n    uint256 public immutable override cancelFee;\\n    uint256 public immutable override releaseRate;\\n    uint256 public immutable override maxReleaseAmount;\\n    uint16 public immutable override initialBondPriceIndex;\\n    CloberOrderBook private immutable _market;\\n    CloberOrderNFT private immutable _orderNFT;\\n\\n    uint8 public override minBonus;\\n    uint8 public override maxBonus;\\n    uint64 public override lastReleasedAt;\\n    uint16 public override sampleSize;\\n    uint256 public override lastRecordedReleasedAmount;\\n    uint256 public override soldAmount;\\n\\n    mapping(uint256 => Bond) private _bonds;\\n\\n    constructor(\\n        address treasury_,\\n        address burnAddress_,\\n        address underlyingToken_,\\n        uint256 cancelFee_,\\n        address market_,\\n        uint256 releaseRate_,\\n        uint256 maxReleaseAmount_,\\n        uint16 initialBondPriceIndex_\\n    ) {\\n        _treasury = ITreasury(treasury_);\\n        burnAddress = burnAddress_;\\n        _market = CloberOrderBook(market_);\\n        _orderNFT = CloberOrderNFT(_market.orderToken());\\n        if (_market.baseToken() != underlyingToken_) {\\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\\n        }\\n        // change needed if market policy change to allow non-zero makerFee\\n        if (_market.makerFee() != 0) {\\n            revert Errors.MangoError(Errors.INVALID_FEE);\\n        }\\n        underlyingToken = underlyingToken_;\\n        cancelFee = cancelFee_;\\n        quoteToken = _market.quoteToken();\\n        releaseRate = releaseRate_;\\n        maxReleaseAmount = maxReleaseAmount_;\\n        initialBondPriceIndex = initialBondPriceIndex_;\\n    }\\n\\n    function initialize(uint8 minBonus_, uint8 maxBonus_, uint64 startAt_, uint16 sampleSize_) external initializer {\\n        _initReentrancyGuard();\\n        _transferOwnership(msg.sender);\\n        _changeAvailableBonusRange(minBonus_, maxBonus_);\\n        lastReleasedAt = startAt_;\\n        sampleSize = sampleSize_;\\n        setApprovals();\\n    }\\n\\n    modifier checkBonusRange(uint8 bonus) {\\n        if (bonus > maxBonus || bonus < minBonus) {\\n            revert Errors.MangoError(Errors.INVALID_BONUS);\\n        }\\n        _;\\n    }\\n\\n    function setApprovals() public {\\n        IERC20(quoteToken).safeApprove(address(_treasury), 0);\\n        IERC20(quoteToken).safeApprove(address(_treasury), type(uint256).max);\\n    }\\n\\n    function market() external view returns (address) {\\n        return address(_market);\\n    }\\n\\n    function treasury() external view returns (address) {\\n        return address(_treasury);\\n    }\\n\\n    function ownerOf(uint256 orderId) external view returns (address) {\\n        return _bonds[orderId].owner;\\n    }\\n\\n    function ownersOf(uint256[] calldata orderIds) external view returns (BondOwner[] memory owners) {\\n        owners = new BondOwner[](orderIds.length);\\n        for (uint256 i = 0; i < orderIds.length; ++i) {\\n            owners[i] = BondOwner({owner: _bonds[orderIds[i]].owner, orderId: orderIds[i]});\\n        }\\n        return owners;\\n    }\\n\\n    function claimable(uint256 orderId) external view returns (uint256 claimableAmount) {\\n        OrderKey memory orderKey = _decodeOrderId(orderId);\\n        Bond memory bond = _bonds[orderId];\\n        if (!bond.isValid) {\\n            return 0;\\n        }\\n        (, claimableAmount, , ) = _market.getClaimable(orderKey);\\n        claimableAmount += _unaccountedClaimedAmount(bond, orderKey);\\n    }\\n\\n    function unaccountedClaimedAmount(uint256 orderId) external view returns (uint256) {\\n        return _unaccountedClaimedAmount(_bonds[orderId], _decodeOrderId(orderId));\\n    }\\n\\n    function _unaccountedClaimedAmount(\\n        Bond memory bond,\\n        OrderKey memory orderKey\\n    ) internal view returns (uint256 amount) {\\n        uint64 remoteOrderRawAmount = _market.getOrder(orderKey).amount;\\n        uint64 unaccountedClaimedRawAmount = bond.purchasedRawAmount - remoteOrderRawAmount - bond.claimedRawAmount;\\n        if (unaccountedClaimedRawAmount == 0) {\\n            return 0;\\n        }\\n        amount = _market.rawToQuote(unaccountedClaimedRawAmount);\\n    }\\n\\n    function releasedAmount() public view returns (uint256 newReleasedAmount) {\\n        // @dev Assume that `lastReleasedAt` is not 0. We initialize this value in `initialize()`.\\n        uint256 timeDiff = block.timestamp - lastReleasedAt;\\n        newReleasedAmount = lastRecordedReleasedAmount + releaseRate * timeDiff;\\n        if (newReleasedAmount > maxReleaseAmount) {\\n            newReleasedAmount = maxReleaseAmount;\\n        }\\n    }\\n\\n    function availableAmount() public view returns (uint256) {\\n        return releasedAmount() - soldAmount;\\n    }\\n\\n    function _release() internal {\\n        if (block.timestamp > lastReleasedAt) {\\n            lastRecordedReleasedAmount = releasedAmount();\\n            lastReleasedAt = uint64(block.timestamp);\\n        }\\n    }\\n\\n    function bondInfo(uint256 orderId) public view returns (BondInfo memory) {\\n        Bond memory bond = _bonds[orderId];\\n        uint16 priceIndex = _decodeOrderId(orderId).priceIndex;\\n        return\\n            BondInfo({\\n                orderId: orderId,\\n                owner: bond.owner,\\n                bonus: bond.bonus,\\n                isValid: bond.isValid,\\n                spentAmount: _market.rawToQuote(bond.spentRawAmount),\\n                bondedAmount: _market.rawToBase(bond.purchasedRawAmount, priceIndex, false),\\n                claimedAmount: _market.rawToQuote(bond.claimedRawAmount),\\n                canceledAmount: _market.rawToBase(bond.canceledRawAmount, priceIndex, false)\\n            });\\n    }\\n\\n    function bondInfos(uint256[] calldata orderIds) external view returns (BondInfo[] memory infos) {\\n        infos = new BondInfo[](orderIds.length);\\n        for (uint256 i = 0; i < orderIds.length; ++i) {\\n            infos[i] = bondInfo(orderIds[i]);\\n        }\\n        return infos;\\n    }\\n\\n    function getBasisPriceIndex() public view returns (uint16 priceIndex) {\\n        uint16 index = _market.blockTradeLogIndex();\\n        uint16 size = sampleSize;\\n        priceIndex = 0;\\n        uint16 gap = 2;\\n        for (uint256 i = 0; i < size; ++i) {\\n            CloberOrderBook.BlockTradeLog memory log = _market.blockTradeLogs(index);\\n            if (i == 0 && log.blockTime == block.timestamp) {\\n                // skip log of the same block\\n                unchecked {\\n                    index -= 1;\\n                }\\n                log = _market.blockTradeLogs(index);\\n            }\\n            // check empty block log\\n            if (log.blockTime == 0) {\\n                if (priceIndex < initialBondPriceIndex) {\\n                    return initialBondPriceIndex;\\n                }\\n                break;\\n            }\\n            if (log.high > priceIndex) {\\n                priceIndex = log.high;\\n            }\\n            unchecked {\\n                index -= gap;\\n                gap *= 2;\\n            }\\n        }\\n        if (priceIndex == 0) {\\n            return initialBondPriceIndex;\\n        }\\n    }\\n\\n    function getBasisPrice() external view returns (uint256 price) {\\n        return _market.indexToPrice(getBasisPriceIndex());\\n    }\\n\\n    function expectedBondAmount(\\n        uint256 spentAmount,\\n        uint8 bonus\\n    ) external view checkBonusRange(bonus) returns (uint256 amount) {\\n        uint64 spentRawAmount = _market.quoteToRaw(spentAmount, false);\\n        (uint16 priceIndex, uint256 orderAmount) = _calculateOrder(spentRawAmount, bonus);\\n        amount = _market.rawToBase(_market.baseToRaw(orderAmount, priceIndex, false), priceIndex, false);\\n    }\\n\\n    function _calculateOrder(\\n        uint64 spentRawAmount,\\n        uint8 bonus\\n    ) internal view returns (uint16 priceIndex, uint256 amount) {\\n        uint16 basisPriceIndex = getBasisPriceIndex();\\n        uint256 underlyingAmount = _market.rawToBase(spentRawAmount, basisPriceIndex, false);\\n        priceIndex = basisPriceIndex + bonus;\\n        uint64 orderRawAmount = _market.baseToRaw(underlyingAmount, priceIndex, false);\\n        amount = _market.rawToBase(orderRawAmount, basisPriceIndex, false);\\n    }\\n\\n    function purchaseBond(\\n        uint256 spentAmount,\\n        uint8 bonus,\\n        address to,\\n        uint16 limitPriceIndex\\n    ) external nonReentrant whenNotPaused checkBonusRange(bonus) returns (uint256 orderId) {\\n        _release();\\n        uint64 spentRawAmount = _market.quoteToRaw(spentAmount, false);\\n        spentAmount = _market.rawToQuote(spentRawAmount);\\n        IERC20(quoteToken).safeTransferFrom(msg.sender, address(this), spentAmount);\\n        (uint16 priceIndex, uint256 orderAmount) = _calculateOrder(spentRawAmount, bonus);\\n        if (availableAmount() < orderAmount) {\\n            revert Errors.MangoError(Errors.INSUFFICIENT_BALANCE);\\n        }\\n        if (priceIndex > limitPriceIndex) {\\n            revert Errors.MangoError(Errors.SLIPPAGE);\\n        }\\n        uint64 orderedRawAmount;\\n        {\\n            // post only\\n            uint256 orderIndex = _market.limitOrder(address(this), priceIndex, 0, orderAmount, 2, new bytes(0));\\n            if (orderIndex == type(uint256).max) {\\n                // It represents order is not created b/c the orderAmount is too small.\\n                revert Errors.MangoError(Errors.AMOUNT_TOO_SMALL);\\n            }\\n            OrderKey memory orderKey = OrderKey({isBid: false, priceIndex: priceIndex, orderIndex: orderIndex});\\n            orderId = _orderNFT.encodeId(orderKey);\\n            orderedRawAmount = _market.getOrder(orderKey).amount;\\n        }\\n        _bonds[orderId] = Bond({\\n            spentRawAmount: spentRawAmount,\\n            purchasedRawAmount: orderedRawAmount,\\n            claimedRawAmount: 0,\\n            canceledRawAmount: 0,\\n            owner: to,\\n            bonus: bonus,\\n            isValid: true\\n        });\\n        uint256 underlyingAmount = _market.rawToBase(orderedRawAmount, priceIndex, false);\\n        if (underlyingAmount == 0) {\\n            // Check if the underlyingAmount is 0 due to the rounding calculation.\\n            revert Errors.MangoError(Errors.AMOUNT_TOO_SMALL);\\n        }\\n        emit PurchaseBond(msg.sender, to, orderId, spentAmount, bonus, underlyingAmount);\\n\\n        _treasury.receiveToken(spentAmount);\\n    }\\n\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256,\\n        bytes calldata\\n    ) external payable {\\n        if (msg.sender != address(_market)) {\\n            revert Errors.MangoError(Errors.ACCESS);\\n        }\\n        if (!(inputToken == underlyingToken && outputToken == quoteToken)) {\\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\\n        }\\n        IERC20(inputToken).safeTransfer(msg.sender, inputAmount);\\n        soldAmount += inputAmount;\\n    }\\n\\n    function claim(uint256[] calldata orderIds) public nonReentrant {\\n        for (uint256 i = 0; i < orderIds.length; ++i) {\\n            uint256 claimedAmount;\\n            uint256 orderId = orderIds[i];\\n            Bond memory bond = _bonds[orderId];\\n            if (!bond.isValid) {\\n                continue;\\n            }\\n            OrderKey memory orderKey = _decodeOrderId(orderId);\\n            claimedAmount += _unaccountedClaimedAmount(bond, orderKey);\\n            uint256 beforeQuoteAmount = IERC20(quoteToken).balanceOf(address(this));\\n            _market.claim(msg.sender, _toSingletonArray(orderKey));\\n            claimedAmount += IERC20(quoteToken).balanceOf(address(this)) - beforeQuoteAmount;\\n            if (claimedAmount > 0) {\\n                IERC20(quoteToken).safeTransfer(bond.owner, claimedAmount);\\n\\n                uint64 remoteOrderRawAmount = _market.getOrder(orderKey).amount;\\n                bond.claimedRawAmount = bond.purchasedRawAmount - remoteOrderRawAmount;\\n                if (bond.purchasedRawAmount == bond.claimedRawAmount) {\\n                    bond.isValid = false;\\n                }\\n                _bonds[orderId] = bond;\\n            }\\n        }\\n    }\\n\\n    function breakBonds(uint256[] calldata orderIds) external nonReentrant {\\n        OrderKey[] memory orderKeys = new OrderKey[](orderIds.length);\\n        for (uint256 i = 0; i < orderIds.length; ++i) {\\n            uint256 orderId = orderIds[i];\\n            Bond memory bond = _bonds[orderId];\\n            if (bond.owner != msg.sender) {\\n                revert Errors.MangoError(Errors.ACCESS);\\n            }\\n            OrderKey memory orderKey = _decodeOrderId(orderId);\\n            orderKeys[i] = orderKey;\\n            if (!bond.isValid) {\\n                continue;\\n            }\\n            uint64 remoteOrderRawAmount = _market.getOrder(orderKey).amount;\\n            (uint64 claimableRawAmount, , , ) = _market.getClaimable(orderKey);\\n            bond.canceledRawAmount = remoteOrderRawAmount - claimableRawAmount;\\n            bond.claimedRawAmount = bond.purchasedRawAmount - bond.canceledRawAmount;\\n            bond.isValid = false;\\n            _bonds[orderId] = bond;\\n        }\\n        uint256 beforeQuoteAmount = IERC20(quoteToken).balanceOf(address(this));\\n        uint256 beforeUnderlyingAmount = IERC20(underlyingToken).balanceOf(address(this));\\n        _market.cancel(address(this), orderKeys);\\n        uint256 claimedQuoteAmount = IERC20(quoteToken).balanceOf(address(this)) - beforeQuoteAmount;\\n        uint256 canceledUnderlyingAmount = IERC20(underlyingToken).balanceOf(address(this)) - beforeUnderlyingAmount;\\n\\n        uint256 cancelFeeAmount = _ceil(canceledUnderlyingAmount * cancelFee, _FEE_PRECISION);\\n        IERC20(underlyingToken).safeTransfer(burnAddress, cancelFeeAmount);\\n        IERC20(underlyingToken).safeTransfer(msg.sender, canceledUnderlyingAmount - cancelFeeAmount);\\n        IERC20(quoteToken).safeTransfer(msg.sender, claimedQuoteAmount);\\n    }\\n\\n    function withdrawLostERC20(address token, address to) external onlyOwner {\\n        if (token == underlyingToken || token == quoteToken) {\\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\\n        }\\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function changeAvailableBonusRange(uint8 min, uint8 max) external onlyOwner {\\n        _changeAvailableBonusRange(min, max);\\n    }\\n\\n    function changePriceSampleSize(uint16 newSampleSize) external onlyOwner {\\n        sampleSize = newSampleSize;\\n    }\\n\\n    function _changeAvailableBonusRange(uint8 min, uint8 max) internal {\\n        if (min > max) {\\n            revert Errors.MangoError(Errors.INVALID_BONUS);\\n        }\\n        minBonus = min;\\n        maxBonus = max;\\n    }\\n\\n    function _decodeOrderId(uint256 orderId) internal view returns (OrderKey memory) {\\n        return _orderNFT.decodeId(orderId);\\n    }\\n\\n    function _ceil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function _toSingletonArray(OrderKey memory orderKey) internal pure returns (OrderKey[] memory arr) {\\n        arr = new OrderKey[](1);\\n        arr[0] = orderKey;\\n    }\\n\\n    function withdrawExceededUnderlyingToken(address receiver) external onlyOwner {\\n        uint256 thisBalance = IERC20(underlyingToken).balanceOf(address(this));\\n        if (thisBalance + soldAmount > maxReleaseAmount) {\\n            IERC20(underlyingToken).safeTransfer(receiver, thisBalance + soldAmount - maxReleaseAmount);\\n        }\\n    }\\n\\n    function withdrawAsDebt(address receiver, uint256 amount) external onlyOwner {\\n        IERC20(underlyingToken).safeTransfer(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc704b72b0fec20ea396ced5549c2c215cd76ababb84c027bdfdfc8a4588e8a3e\",\"license\":\"MIT\"},\"contracts/clober/CloberMarketSwapCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketSwapCallbackReceiver {\\n    /**\\n     * @notice Contracts placing orders on the OrderBook must implement this method.\\n     * In this method, the contract has to send the required token, or the transaction will revert.\\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\\n     * @param inputToken The address of the token the user has to send.\\n     * @param outputToken The address of the token the user has received.\\n     * @param inputAmount The amount of tokens the user has to send.\\n     * @param outputAmount The amount of tokens the user has received.\\n     * @param data The user's custom callback data.\\n     */\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c238ac30949be45e9c6a4b74416fb03bb99a3cfde0414ed6beda0fd5f51f5b8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/clober/CloberOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderBook {\\n    /**\\n     * @notice Emitted when an order is created.\\n     * @param sender The address who sent the tokens to make the order.\\n     * @param user The address with the rights to claim the proceeds of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param options LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event MakeOrder(\\n        address indexed sender,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint32 claimBounty,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        uint8 options\\n    );\\n\\n    /**\\n     * @notice Emitted when an order takes from the order book.\\n     * @param sender The address who sent the tokens to take the order.\\n     * @param user The recipient address of the traded token.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The ordered raw amount.\\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\\n\\n    /**\\n     * @notice Emitted when an order is canceled.\\n     * @param user The owner of the order.\\n     * @param rawAmount The raw amount remaining that was canceled.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\\n     */\\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\\n\\n    /**\\n     * @notice Emitted when the proceeds of an order is claimed.\\n     * @param claimer The address that initiated the claim.\\n     * @param user The owner of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param bountyAmount The size of the claim bounty.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\\n     */\\n    event ClaimOrder(\\n        address indexed claimer,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint256 bountyAmount,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        bool isBase\\n    );\\n\\n    /**\\n     * @notice Emitted when a flash-loan is taken.\\n     * @param caller The caller address of the flash-loan.\\n     * @param borrower The address of the flash loan token receiver.\\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\\n     * @param baseAmount The amount of base tokens the user has borrowed.\\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\\n     */\\n    event Flash(\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        uint256 earnedQuote,\\n        uint256 earnedBase\\n    );\\n\\n    /**\\n     * @notice A struct that represents an order.\\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\\n     * @param owner The address of the order owner.\\n     */\\n    struct Order {\\n        uint64 amount;\\n        uint32 claimBounty;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice A struct that represents a block trade log.\\n     * @param blockTime The timestamp of the block.\\n     * @param askVolume The volume taken on the ask side.\\n     * @param bidVolume The volume taken on the bid side.\\n     * @param open The price book index on the open.\\n     * @param high The highest price book index in the block.\\n     * @param low The lowest price book index in the block.\\n     * @param close The price book index on the close.\\n     */\\n    struct BlockTradeLog {\\n        uint64 blockTime;\\n        uint64 askVolume;\\n        uint64 bidVolume;\\n        uint16 open;\\n        uint16 high;\\n        uint16 low;\\n        uint16 close;\\n    }\\n\\n    /**\\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\\n     * @dev `msg.value` will be used as the claimBounty.\\n     * @param user The taker/maker address.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\\n     * @param data Custom callback data\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        address user,\\n        uint16 priceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected input amount and output amount.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * Bid & expendInput => Used as input amount.\\n     * Bid & !expendInput => Not used.\\n     * Ask & expendInput => Not used.\\n     * Ask & !expendInput => Used as output amount.\\n     * @param baseAmount The base token amount to trade.\\n     * Bid & expendInput => Not used.\\n     * Bid & !expendInput => Used as output amount.\\n     * Ask & expendInput => Used as input amount.\\n     * Ask & !expendInput => Not used.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     */\\n    function getExpectedAmount(\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Take opens orders until certain conditions are met.\\n     * @param user The taker address.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     * @param data Custom callback data.\\n     */\\n    function marketOrder(\\n        address user,\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cancel orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param receiver The address to receive canceled tokens.\\n     * @param orderKeys The order keys of the orders to cancel.\\n     */\\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Claim the proceeds of orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param claimer The address to receive the claim bounties.\\n     * @param orderKeys The order keys of the orders to claim.\\n     */\\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Get the claimable proceeds of an order.\\n     * @param orderKey The order key of the order.\\n     * @return claimableRawAmount The claimable raw amount.\\n     * @return claimableAmount The claimable amount after fees.\\n     * @return feeAmount The maker fee to be paid on claim.\\n     * @return rebateAmount The rebate to be received on claim.\\n     */\\n    function getClaimable(\\n        OrderKey calldata orderKey\\n    )\\n        external\\n        view\\n        returns (uint64 claimableRawAmount, uint256 claimableAmount, uint256 feeAmount, uint256 rebateAmount);\\n\\n    /**\\n     * @notice Flash loan the tokens in the OrderBook.\\n     * @param borrower The address to receive the loan.\\n     * @param quoteAmount The quote token amount to borrow.\\n     * @param baseAmount The base token amount to borrow.\\n     * @param data The user's custom callback data.\\n     */\\n    function flash(address borrower, uint256 quoteAmount, uint256 baseAmount, bytes calldata data) external;\\n\\n    /**\\n     * @notice Returns the quote unit amount.\\n     * @return The amount that one raw amount represent in quote tokens.\\n     */\\n    function quoteUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The maker fee. 100 = 1bp.\\n     */\\n    function makerFee() external view returns (int24);\\n\\n    /**\\n     * @notice Returns the take fee\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The taker fee. 100 = 1bps.\\n     */\\n    function takerFee() external view returns (uint24);\\n\\n    /**\\n     * @notice Returns the address of the order NFT contract.\\n     * @return The address of the order NFT contract.\\n     */\\n    function orderToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote token.\\n     * @return The address of the quote token.\\n     */\\n    function quoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the base token.\\n     * @return The address of the base token.\\n     */\\n    function baseToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current total open amount at the given price.\\n     * @param isBid The flag to choose which side to check the depth for.\\n     * @param priceIndex The price book index.\\n     * @return The total open amount.\\n     */\\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the fee balance that has not been collected yet.\\n     * @return quote The current fee balance for the quote token.\\n     * @return base The current fee balance for the base token.\\n     */\\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the host.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the host.\\n     */\\n    function uncollectedHostFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the dao treasury.\\n     */\\n    function uncollectedProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the order book is empty or not.\\n     * @param isBid The flag to choose which side to check the emptiness of.\\n     * @return Whether the order book is empty or not on that side.\\n     */\\n    function isEmpty(bool isBid) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the order information.\\n     * @param orderKey The order key of the order.\\n     * @return The order struct of the given order key.\\n     */\\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\\n\\n    /**\\n     * @notice Returns the lowest ask price index or the highest bid price index.\\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\\n     * @return The current price index. If the order book is empty, it will revert.\\n     */\\n    function bestPriceIndex(bool isBid) external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the current block trade log index.\\n     * @return The current block trade log index.\\n     */\\n    function blockTradeLogIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the block trade log for a certain index.\\n     * @param index The block trade log index used to query the block trade log.\\n     * @return The queried block trade log.\\n     */\\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\\n     * @param rawAmount The raw amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted base amount.\\n     */\\n    function rawToBase(uint64 rawAmount, uint16 priceIndex, bool roundingUp) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding quote amount.\\n     * @param rawAmount The raw amount to be converted.\\n     * @return The converted quote amount.\\n     */\\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\\n     * @param baseAmount The base amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function baseToRaw(uint256 baseAmount, uint16 priceIndex, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Converts a quote amount to its corresponding raw amount.\\n     * @param quoteAmount The quote amount to be converted.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Collects fees for either the protocol or host.\\n     * @param token The token address to collect. It should be the quote token or the base token.\\n     * @param destination The destination address to transfer fees.\\n     * It should be the dao treasury address or the host address.\\n     */\\n    function collectFees(address token, address destination) external;\\n\\n    /**\\n     * @notice Change the owner of the order.\\n     * @dev Only the OrderToken contract can call this function.\\n     * @param orderKey The order key of the order.\\n     * @param newOwner The new owner address.\\n     */\\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\\n}\\n\",\"keccak256\":\"0x84a4a3b3ce613f15df1786df576d11ae323917c22a13ea374595ed26bbce0744\",\"license\":\"GPL-2.0-or-later\"},\"contracts/clober/CloberOrderKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A struct that represents a unique key for an order.\\n * @param isBid The flag indicating whether it's a bid order or an ask order.\\n * @param priceIndex The price book index.\\n * @param orderIndex The order index.\\n */\\nstruct OrderKey {\\n    bool isBid;\\n    uint16 priceIndex;\\n    uint256 orderIndex;\\n}\\n\",\"keccak256\":\"0x4607151f9e9e7732f5e40c9f899fb4adb35dcee23056312be90976bb979264b4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/clober/CloberOrderNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderNFT is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Returns the base URI for the metadata of this NFT collection.\\n     * @return The base URI for the metadata of this NFT collection.\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the address of the market contract that manages this token.\\n     * @return The address of the market contract that manages this token.\\n     */\\n    function market() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of contract owner.\\n     * @return The address of the contract owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Called when a new token is minted.\\n     * @param to The receiver address of the minted token.\\n     * @param tokenId The id of the token minted.\\n     */\\n    function onMint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Called when a token is burned.\\n     * @param tokenId The id of the token burned.\\n     */\\n    function onBurn(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Changes the base URI for the metadata of this NFT collection.\\n     * @param newBaseURI The new base URI for the metadata of this NFT collection.\\n     */\\n    function changeBaseURI(string memory newBaseURI) external;\\n\\n    /**\\n     * @notice Decodes a token id into an order key.\\n     * @param id The id to decode.\\n     * @return The order key corresponding to the given id.\\n     */\\n    function decodeId(uint256 id) external pure returns (OrderKey memory);\\n\\n    /**\\n     * @notice Encodes an order key to a token id.\\n     * @param orderKey The order key to encode.\\n     * @return The id corresponding to the given order key.\\n     */\\n    function encodeId(OrderKey memory orderKey) external pure returns (uint256);\\n\\n    /**\\n     * @notice Cancels orders with token ids.\\n     * @dev Only the OrderCanceler can call this function.\\n     * @param from The address of the owner of the tokens.\\n     * @param tokenIds The ids of the tokens to cancel.\\n     * @param receiver The address to send the underlying assets to.\\n     */\\n    function cancel(address from, uint256[] calldata tokenIds, address receiver) external;\\n}\\n\",\"keccak256\":\"0x6dd02f42a10694e220fc7f8f0c561012485b058a5f8c244b958443ebdb539433\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBondPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBondPool {\\n    event PurchaseBond(\\n        address indexed payer,\\n        address indexed to,\\n        uint256 indexed orderId,\\n        uint256 spentAmount,\\n        uint8 bonus,\\n        uint256 bondedAmount\\n    );\\n\\n    struct Bond {\\n        uint64 spentRawAmount;\\n        uint64 purchasedRawAmount;\\n        uint64 claimedRawAmount;\\n        uint64 canceledRawAmount;\\n        address owner;\\n        uint8 bonus;\\n        bool isValid; // Only true when the order is opened\\n    }\\n\\n    struct BondInfo {\\n        uint256 orderId;\\n        address owner;\\n        uint8 bonus;\\n        bool isValid;\\n        uint256 spentAmount;\\n        uint256 bondedAmount;\\n        uint256 claimedAmount;\\n        uint256 canceledAmount; // fee excluded\\n    }\\n\\n    struct BondOwner {\\n        address owner;\\n        uint256 orderId;\\n    }\\n\\n    function burnAddress() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function quoteToken() external view returns (address);\\n\\n    function cancelFee() external view returns (uint256);\\n\\n    function market() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function minBonus() external view returns (uint8);\\n\\n    function maxBonus() external view returns (uint8);\\n\\n    function releaseRate() external view returns (uint256);\\n\\n    function maxReleaseAmount() external view returns (uint256);\\n\\n    function initialBondPriceIndex() external view returns (uint16);\\n\\n    function lastReleasedAt() external view returns (uint64);\\n\\n    function sampleSize() external view returns (uint16);\\n\\n    function lastRecordedReleasedAmount() external view returns (uint256);\\n\\n    function soldAmount() external view returns (uint256);\\n\\n    function ownerOf(uint256 orderId) external view returns (address);\\n\\n    function ownersOf(uint256[] calldata orderIds) external view returns (BondOwner[] memory);\\n\\n    function claimable(uint256 orderId) external view returns (uint256);\\n\\n    function unaccountedClaimedAmount(uint256 orderId) external view returns (uint256);\\n\\n    function releasedAmount() external view returns (uint256);\\n\\n    function availableAmount() external view returns (uint256);\\n\\n    function bondInfo(uint256 orderId) external view returns (BondInfo memory);\\n\\n    function bondInfos(uint256[] calldata orderIds) external view returns (BondInfo[] memory);\\n\\n    function getBasisPriceIndex() external view returns (uint16 priceIndex);\\n\\n    function getBasisPrice() external view returns (uint256 price);\\n\\n    function expectedBondAmount(uint256 spentAmount, uint8 bonus) external view returns (uint256);\\n\\n    function purchaseBond(\\n        uint256 spentAmount,\\n        uint8 bonus,\\n        address to,\\n        uint16 limitPriceIndex\\n    ) external returns (uint256 orderId);\\n\\n    function claim(uint256[] calldata orderIds) external;\\n\\n    function breakBonds(uint256[] calldata orderIds) external;\\n\\n    function withdrawLostERC20(address token, address to) external;\\n\\n    function changeAvailableBonusRange(uint8 min, uint8 max) external;\\n\\n    function changePriceSampleSize(uint16 sampleSize) external;\\n\\n    function withdrawExceededUnderlyingToken(address receiver) external;\\n}\\n\",\"keccak256\":\"0x50cee4a8c3df0147bbcd393852795fd76c013e5a8827952e3d90181a3ff0c2fb\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenReceiver {\\n    /**\\n     * @notice Emitted when tokens are received.\\n     * @param sender The address of the sender.\\n     * @param amount The amount of tokens received.\\n     */\\n    event Receive(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice Returns the address of the receivable token.\\n     * @return The address of the receivable token.\\n     */\\n    function receivingToken() external view returns (address);\\n\\n    /**\\n     * @notice Allows the contract to receive tokens.\\n     * @param amount The amount of tokens to be received.\\n     */\\n    function receiveToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xe08100d8e6640f3541f363fc4aec97837a6ec55eb20b43a47916a2ce6f2223ae\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITokenReceiver.sol\\\";\\n\\ninterface ITreasury is ITokenReceiver {\\n    event Distribute(uint256 amount, uint256 elapsed);\\n\\n    function stakedToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function lastDistributedAt() external view returns (uint256);\\n\\n    // precision 18\\n    // tokens per second\\n    function rewardRate() external view returns (uint256);\\n\\n    function getDistributableAmount() external view returns (uint256);\\n\\n    function distribute() external;\\n\\n    function withdrawLostERC20(address token, address to) external;\\n}\\n\",\"keccak256\":\"0x31a2427dec4c340b607a02e36715ba8c77f29f43f32f023425b3be4382209739\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../Errors.sol\\\";\\n\\nabstract contract Pausable is Ownable {\\n    bool public paused;\\n\\n    modifier whenNotPaused() {\\n        if (paused) {\\n            revert Errors.MangoError(Errors.PAUSED);\\n        }\\n        _;\\n    }\\n\\n    function pause() external onlyOwner {\\n        paused = true;\\n    }\\n\\n    function unpause() external onlyOwner {\\n        paused = false;\\n    }\\n}\\n\",\"keccak256\":\"0x4e8c9e07c8506a8e2638246cee572920bb53e7c1c9191615a4ae644a9d7d64e4\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../Errors.sol\\\";\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Mango (https://github.com/mango/core/blob/main/contracts/ReentrancyGuard.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 internal _locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        if (_locked != 1) {\\n            revert Errors.MangoError(Errors.REENTRANCY);\\n        }\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n\\n    function _initReentrancyGuard() internal {\\n        _locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x5afefa70ee3bdb0ee3de1dc1e6cb477ffccea8a7b89f2ad66b610a16c1648d6c\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101c0604052600180553480156200001657600080fd5b5060405162004e2738038062004e2783398101604081905262000039916200033a565b6200004433620002c2565b6001600160a01b0380891660805287811660a0528416610180819052604080516385d1891760e01b815290516385d18917916004808201926020929091908290030181865afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c29190620003d1565b6001600160a01b03166101a0816001600160a01b031681525050856001600160a01b0316610180516001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000128573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014e9190620003d1565b6001600160a01b0316146200017e57604051630bc320f560e01b8152600760048201526024015b60405180910390fd5b610180516001600160a01b031663fc741c7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e69190620003f6565b60020b156200020c57604051630bc320f560e01b81526009600482015260240162000175565b856001600160a01b031660c0816001600160a01b031681525050846101008181525050610180516001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000271573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002979190620003d1565b6001600160a01b031660e052610120929092526101405261ffff1661016052506200041b9350505050565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b80516001600160a01b03811681146200033557600080fd5b919050565b600080600080600080600080610100898b0312156200035857600080fd5b62000363896200031d565b97506200037360208a016200031d565b96506200038360408a016200031d565b9550606089015194506200039a60808a016200031d565b935060a0890151925060c0890151915060e089015161ffff81168114620003c057600080fd5b809150509295985092959890939650565b600060208284031215620003e457600080fd5b620003ef826200031d565b9392505050565b6000602082840312156200040957600080fd5b81518060020b8114620003ef57600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516147ec6200063b600039600081816126e2015261343101526000818161068e01528181610a7b01528181610b5e01528181610bfe01528181610caf01528181610fb70152818161104b015281816113690152818161165001528181611ab601528181611c360152818161205b01528181612124015281816121d7015281816123ff01528181612494015281816125b301528181612772015281816129a001528181612bdb01528181612c8901528181612fed015281816132db015281816135da015281816136ca01528181613a5b01528181613b090152613ba70152600081816108dc0152818161226201528181612292015261230801526000818161045701528181610d9a01528181610dc2015281816131be01526131f70152600081816107830152610d65015260008181610329015261150f01526000818161036b01528181611235015281816113f4015281816115df01528181611a4701528181611b5201528181611bf501528181611ea301528181611fa101528181611ff601528181612516015261335a0152600081816103b7015281816112cb0152818161148e0152818161154c015281816115ab01528181611e3301528181611e6801528181613147015261331e015260008181610628015261156e01526000818161056c01528181611fc3015281816120180152612afa01526147ec6000f3fe6080604052600436106102dc5760003560e01c806380f5560511610184578063aff25c14116100d6578063f09887301161008a578063f6c714d611610064578063f6c714d6146108fe578063fa1a5f591461091e578063fd235fda1461093457600080fd5b8063f09887301461088a578063f2fde38b146108aa578063f35509e4146108ca57600080fd5b8063d1d58b25116100bb578063d1d58b2514610830578063d45c241c14610850578063e5040c421461086a57600080fd5b8063aff25c14146107fa578063c30bdf481461081a57600080fd5b80638da5cb5b11610138578063a756377e11610112578063a756377e146107a5578063aa83a308146107ba578063afe517ee146107da57600080fd5b80638da5cb5b1461073857806391f7cfb91461075c578063a70329981461077157600080fd5b80638456cb59116101695780638456cb59146106d25780638757b15b146106e75780638d0525bb146106fc57600080fd5b806380f556051461067f5780638284511b146106b257600080fd5b806357ef74031161023d57806361f08f23116101f157806370d5ae05116101cb57806370d5ae0514610616578063715018a61461064a5780637aa660471461065f57600080fd5b806361f08f23146105905780636352211e146105bd5780636ba4c138146105f657600080fd5b80635c975abb116102225780635c975abb146104ff5780635ff2f2e81461053057806361d027b31461055d57600080fd5b806357ef7403146104aa5780635ac0d9c0146104bf57600080fd5b806345d30a17116102945780634b86a3d0116102795780634b86a3d01461042557806353701bc11461044557806354c5b6961461047957600080fd5b806345d30a17146103f0578063468e3e2f1461040557600080fd5b8063217a4b70116102c5578063217a4b70146103595780632495a599146103a55780633f4ba83a146103d957600080fd5b806310fc6172146102e157806314025dcd14610317575b600080fd5b3480156102ed57600080fd5b506103016102fc366004613e6c565b610947565b60405161030e9190613e85565b60405180910390f35b34801561032357600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161030e565b34801561036557600080fd5b5061038d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161030e565b3480156103b157600080fd5b5061038d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e557600080fd5b506103ee610d24565b005b3480156103fc57600080fd5b5061034b610d3b565b34801561041157600080fd5b506103ee610420366004613eeb565b610de8565b34801561043157600080fd5b506103ee610440366004613f70565b611614565b34801561045157600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048557600080fd5b5060025461049890610100900460ff1681565b60405160ff909116815260200161030e565b3480156104b657600080fd5b5061034b61164c565b3480156104cb57600080fd5b506002546104e69062010000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161030e565b34801561050b57600080fd5b5060005461052090600160b01b900460ff1681565b604051901515815260200161030e565b34801561053c57600080fd5b5061055061054b366004613eeb565b611705565b60405161030e9190613f8d565b34801561056957600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061038d565b34801561059c57600080fd5b506105b06105ab366004613eeb565b611810565b60405161030e9190613fe5565b3480156105c957600080fd5b5061038d6105d8366004613e6c565b6000908152600560205260409020600101546001600160a01b031690565b34801561060257600080fd5b506103ee610611366004613eeb565b61190f565b34801561062257600080fd5b5061038d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561065657600080fd5b506103ee611e0a565b34801561066b57600080fd5b506103ee61067a3660046140a0565b611e1e565b34801561068b57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061038d565b3480156106be57600080fd5b506103ee6106cd3660046140cc565b611e5e565b3480156106de57600080fd5b506103ee611f77565b3480156106f357600080fd5b506103ee611f94565b34801561070857600080fd5b50600254610725906a0100000000000000000000900461ffff1681565b60405161ffff909116815260200161030e565b34801561074457600080fd5b506000546201000090046001600160a01b031661038d565b34801561076857600080fd5b5061034b61203f565b34801561077d57600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b157600080fd5b50610725612056565b3480156107c657600080fd5b5061034b6107d536600461411b565b612335565b3480156107e657600080fd5b5061034b6107f536600461416c565b612b71565b34801561080657600080fd5b506103ee6108153660046141ae565b612da1565b34801561082657600080fd5b5061034b60035481565b34801561083c57600080fd5b5061034b61084b366004613e6c565b612f29565b34801561085c57600080fd5b506002546104989060ff1681565b34801561087657600080fd5b5061034b610885366004613e6c565b613087565b34801561089657600080fd5b506103ee6108a53660046141eb565b613127565b3480156108b657600080fd5b506103ee6108c53660046141eb565b61322e565b3480156108d657600080fd5b506107257f000000000000000000000000000000000000000000000000000000000000000081565b34801561090a57600080fd5b506103ee610919366004614208565b6132be565b34801561092a57600080fd5b5061034b60045481565b6103ee610942366004614232565b6132d0565b61099d6040518061010001604052806000815260200160006001600160a01b03168152602001600060ff168152602001600015158152602001600081526020016000815260200160008152602001600081525090565b6000828152600560209081526040808320815160e081018352815467ffffffffffffffff8082168352600160401b8204811695830195909552600160801b8104851693820193909352600160c01b90920490921660608201526001909101546001600160a01b038116608083015260ff600160a01b8204811660a0840152600160a81b90910416151560c082015290610a35846133e1565b60200151905060405180610100016040528085815260200183608001516001600160a01b031681526020018360a0015160ff1681526020018360c00151151581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663240ddd2e85600001516040518263ffffffff1660e01b8152600401610ad9919067ffffffffffffffff91909116815260200190565b602060405180830381865afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a91906142dc565b81526020848101516040516363e320a160e11b815267ffffffffffffffff909116600482015261ffff85166024820152600060448201529101906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7c6414290606401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906142dc565b81526040808501519051631206ee9760e11b815267ffffffffffffffff90911660048201526020909101906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063240ddd2e90602401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6991906142dc565b815260608401516040516363e320a160e11b815267ffffffffffffffff909116600482015261ffff84166024820152600060448201526020909101906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7c6414290606401602060405180830381865afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a91906142dc565b9052949350505050565b610d2c61349c565b6000805460ff60b01b19169055565b6002546000908190610d5d9062010000900467ffffffffffffffff164261430b565b9050610d89817f000000000000000000000000000000000000000000000000000000000000000061431e565b600354610d969190614335565b91507f0000000000000000000000000000000000000000000000000000000000000000821115610de4577f000000000000000000000000000000000000000000000000000000000000000091505b5090565b600154600114610e1357604051630bc320f560e01b8152600260048201526024015b60405180910390fd5b600260015560008167ffffffffffffffff811115610e3357610e33614348565b604051908082528060200260200182016040528015610e7e57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610e515790505b50905060005b8281101561121c576000848483818110610ea057610ea061435e565b60209081029290920135600081815260058452604090819020815160e081018352815467ffffffffffffffff8082168352600160401b8204811697830197909752600160801b8104871693820193909352600160c01b90920490941660608201526001909301546001600160a01b0381166080850181905260ff600160a01b8304811660a0870152600160a81b909204909116151560c085015290935033149050610f6157604051630bc320f560e01b815260006004820152602401610e0a565b6000610f6c836133e1565b905080858581518110610f8157610f8161435e565b60200260200101819052508160c00151610f9d5750505061120c565b604051634cd9c08160e11b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399b3810290610fec908590600401614374565b606060405180830381865afa158015611009573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102d91906143d2565b51604051635fec377960e01b81529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635fec377990611080908690600401614374565b608060405180830381865afa15801561109d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c1919061442f565b505050905080826110d2919061446e565b67ffffffffffffffff166060850181905260208501516110f2919061446e565b67ffffffffffffffff9081166040808701918252600060c08801818152988152600560209081529190208751815492890151935160608a01518616600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff918716600160801b02919091166fffffffffffffffffffffffffffffffff958716600160401b026fffffffffffffffffffffffffffffffff1990951692909616919091179290921792909216929092179190911781556080850151600191909101805460a09096015196511515600160a81b0260ff60a81b1960ff909816600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199097166001600160a01b03909316929092179590951795909516949094179092555050505b6112158161448f565b9050610e84565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a891906142dc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611312573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133691906142dc565b6040517fdfdc93880000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dfdc9388906113a090309087906004016144a8565b600060405180830381600087803b1580156113ba57600080fd5b505af11580156113ce573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f91906142dc565b611469919061430b565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f991906142dc565b611503919061430b565b9050600061153d6115347f00000000000000000000000000000000000000000000000000000000000000008461431e565b620f42406134fd565b90506115936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613527565b6115d2336115a1838561430b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613527565b6116066001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385613527565b505060018055505050505050565b61161c61349c565b6002805461ffff9092166a0100000000000000000000026bffff0000000000000000000019909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a204d0c611685612056565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401602060405180830381865afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170091906142dc565b905090565b60608167ffffffffffffffff81111561172057611720614348565b60405190808252806020026020018201604052801561176557816020015b604080518082019091526000808252602082015281526020019060019003908161173e5790505b50905060005b82811015611808576040518060400160405280600560008787868181106117945761179461435e565b6020908102929092013583525081810192909252604001600020600101546001600160a01b03168252018585848181106117d0576117d061435e565b905060200201358152508282815181106117ec576117ec61435e565b6020026020010181905250806118019061448f565b905061176b565b505b92915050565b60608167ffffffffffffffff81111561182b5761182b614348565b6040519080825280602002602001820160405280156118b257816020015b61189f6040518061010001604052806000815260200160006001600160a01b03168152602001600060ff168152602001600015158152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816118495790505b50905060005b82811015611808576118e18484838181106118d5576118d561435e565b90506020020135610947565b8282815181106118f3576118f361435e565b6020026020010181905250806119089061448f565b90506118b8565b60015460011461193557604051630bc320f560e01b815260026004820152602401610e0a565b600260015560005b81811015611e015760008084848481811061195a5761195a61435e565b60209081029290920135600081815260058452604090819020815160e081018352815467ffffffffffffffff8082168352600160401b8204811697830197909752600160801b8104871693820193909352600160c01b90920490941660608201526001909301546001600160a01b038116608085015260ff600160a01b8204811660a0860152600160a81b90910416151560c084018190529093509050611a0357505050611df1565b6000611a0e836133e1565b9050611a1a82826135d5565b611a249085614335565b6040516370a0823160e01b81523060048201529094506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab291906142dc565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166375375e9633611aed85613746565b6040518363ffffffff1660e01b8152600401611b0a9291906144a8565b600060405180830381600087803b158015611b2457600080fd5b505af1158015611b38573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc691906142dc565b611bd0919061430b565b611bda9086614335565b94508415611deb576080830151611c1c906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169087613527565b604051634cd9c08160e11b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399b3810290611c6b908690600401614374565b606060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac91906143d2565b516020850151909150611cc090829061446e565b67ffffffffffffffff90811660408601819052602086015190911603611ce857600060c08501525b50600084815260056020908152604091829020855181549287015193870151606088015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff928216600160801b02929092166fffffffffffffffffffffffffffffffff968216600160401b026fffffffffffffffffffffffffffffffff19909616919093161793909317939093169290921717815560808401516001909101805460a086015160c08701511515600160a81b0260ff60a81b1960ff909216600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199093166001600160a01b039095169490941791909117169190911790555b50505050505b611dfa8161448f565b905061193d565b50506001805550565b611e1261349c565b611e1c60006137b0565b565b611e2661349c565b611e5a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383613527565b5050565b611e6661349c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480611ed757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b15611ef857604051630bc320f560e01b815260076004820152602401610e0a565b6040516370a0823160e01b8152306004820152611e5a9082906001600160a01b038516906370a0823190602401602060405180830381865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6691906142dc565b6001600160a01b0385169190613527565b611f7f61349c565b6000805460ff60b01b1916600160b01b179055565b611fe96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000613821565b611e1c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019613821565b600060045461204c610d3b565b611700919061430b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c9ed23766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db919061452d565b60028054600094509192506a010000000000000000000090910461ffff1690835b8261ffff168110156122f95760405163092337eb60e21b815261ffff851660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063248cdfac9060240160e060405180830381865afa158015612173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612197919061454a565b9050811580156121b15750805167ffffffffffffffff1642145b1561224d5760405163092337eb60e21b815261ffff6000199690960195861660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063248cdfac9060240160e060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a919061454a565b90505b805167ffffffffffffffff166000036122c1577f000000000000000000000000000000000000000000000000000000000000000061ffff168661ffff1610156122bb577f00000000000000000000000000000000000000000000000000000000000000009550505050505090565b506122f9565b8561ffff16816080015161ffff1611156122dd57806080015195505b5092819003926002909102906122f28161448f565b90506120fc565b508361ffff1660000361232f577f0000000000000000000000000000000000000000000000000000000000000000935050505090565b50505090565b600060015460011461235d57604051630bc320f560e01b815260026004820152602401610e0a565b6002600155600054600160b01b900460ff161561239057604051630bc320f560e01b815260016004820152602401610e0a565b600254849060ff610100909104811690821611806123b6575060025460ff908116908216105b156123d757604051630bc320f560e01b8152600a6004820152602401610e0a565b6123df61396f565b60405163441055f560e01b815260048101879052600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441055f590604401602060405180830381865afa15801561244e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124729190614610565b604051631206ee9760e11b815267ffffffffffffffff821660048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063240ddd2e90602401602060405180830381865afa1580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250791906142dc565b965061253e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308a6139ba565b60008061254b8389613a11565b915091508061255861203f565b101561257a57604051630bc320f560e01b815260036004820152602401610e0a565b8561ffff168261ffff1611156125a657604051630bc320f560e01b815260056004820152602401610e0a565b6000806001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663bfc18aef308684876002826040519080825280601f01601f191660200182016040528015612609576020820181803683370190505b506040518763ffffffff1660e01b815260040161262b9695949392919061467d565b6020604051808303816000875af115801561264a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266e91906142dc565b9050600019810361269557604051630bc320f560e01b815260066004820152602401610e0a565b604080516060810182526000815261ffff8616602082015280820183905290517fc776d5830000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c776d58390612717908490600401614374565b602060405180830381865afa158015612734573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275891906142dc565b604051634cd9c08160e11b81529098506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399b38102906127a7908490600401614374565b606060405180830381865afa1580156127c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e891906143d2565b60000151925050506040518060e001604052808567ffffffffffffffff1681526020018267ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001896001600160a01b031681526020018a60ff168152602001600115158152506005600088815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160010160146101000a81548160ff021916908360ff16021790555060c08201518160010160156101000a81548160ff02191690831515021790555090505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7c64142838660006040518463ffffffff1660e01b8152600401612a129392919067ffffffffffffffff93909316835261ffff9190911660208301521515604082015260600190565b602060405180830381865afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5391906142dc565b905080600003612a7957604051630bc320f560e01b815260066004820152602401610e0a565b604080518c815260ff8c16602082015290810182905287906001600160a01b038b169033907f267dddb881e07bcf2b2f2fea4452c4a4a99ac8577aaf7c026f68210185fb90479060600160405180910390a46040517f37df00c9000000000000000000000000000000000000000000000000000000008152600481018c90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906337df00c990602401600060405180830381600087803b158015612b4657600080fd5b505af1158015612b5a573d6000803e3d6000fd5b50506001805550969b9a5050505050505050505050565b600254600090829060ff61010090910481169082161180612b9a575060025460ff908116908216105b15612bbb57604051630bc320f560e01b8152600a6004820152602401610e0a565b60405163441055f560e01b815260048101859052600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441055f590604401602060405180830381865afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190614610565b9050600080612c5d8387613a11565b60405163151d468760e11b81526004810182905261ffff831660248201526000604482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7c64142908290632a3a8d0e90606401602060405180830381865afa158015612ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d049190614610565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff909116600482015261ffff8516602482015260006044820152606401602060405180830381865afa158015612d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9691906142dc565b979650505050505050565b600054610100900460ff1615808015612dc15750600054600160ff909116105b80612ddb5750303b158015612ddb575060005460ff166001145b612e4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610e0a565b6000805460ff191660011790558015612e70576000805461ff0019166101001790555b612e7960018055565b612e82336137b0565b612e8c8585613c26565b600280546bffffffffffffffffffff000019166201000067ffffffffffffffff8616026bffff000000000000000000001916176a010000000000000000000061ffff851602179055612edc611f94565b8015612f22576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600080612f35836133e1565b600084815260056020908152604091829020825160e081018452815467ffffffffffffffff8082168352600160401b8204811694830194909452600160801b8104841694820194909452600160c01b9093049091166060830152600101546001600160a01b038116608083015260ff600160a01b8204811660a0840152600160a81b90910416151560c0820181905291925090612fd6575060009392505050565b604051635fec377960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635fec377990613022908590600401614374565b608060405180830381865afa15801561303f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613063919061442f565b509094506130759150829050836135d5565b61307f9084614335565b949350505050565b6000818152600560209081526040808320815160e081018352815467ffffffffffffffff8082168352600160401b8204811695830195909552600160801b8104851693820193909352600160c01b90920490921660608201526001909101546001600160a01b038116608083015260ff600160a01b8204811660a0840152600160a81b90910416151560c082015261180a90613122846133e1565b6135d5565b61312f61349c565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ba91906142dc565b90507f0000000000000000000000000000000000000000000000000000000000000000600454826131eb9190614335565b1115611e5a57611e5a827f0000000000000000000000000000000000000000000000000000000000000000600454846132249190614335565b6115a1919061430b565b61323661349c565b6001600160a01b0381166132b25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610e0a565b6132bb816137b0565b50565b6132c661349c565b611e5a8282613c26565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461331c57604051630bc320f560e01b815260006004820152602401610e0a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031614801561338e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b6133ae57604051630bc320f560e01b815260076004820152602401610e0a565b6133c26001600160a01b0387163386613527565b83600460008282546133d49190614335565b9091555050505050505050565b604080516060810182526000808252602082018190528183015290517fdc20c6fa000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dc20c6fa90602401606060405180830381865afa158015613478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a91906146e4565b6000546001600160a01b0362010000909104163314611e1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e0a565b600081600161350c8286614335565b613516919061430b565b613520919061472f565b9392505050565b6040516001600160a01b0383166024820152604481018290526135d09084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613c74565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399b38102846040518263ffffffff1660e01b81526004016136249190614374565b606060405180830381865afa158015613641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366591906143d2565b60000151905060008460400151828660200151613682919061446e565b61368c919061446e565b90508067ffffffffffffffff166000036136ab5760009250505061180a565b604051631206ee9760e11b815267ffffffffffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063240ddd2e90602401602060405180830381865afa158015613719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373d91906142dc565b95945050505050565b604080516001808252818301909252606091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161375d57905050905081816000815181106137a0576137a061435e565b6020026020010181905250919050565b600080546001600160a01b03838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b8015806138b457506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561388e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b291906142dc565b155b6139265760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610e0a565b6040516001600160a01b0383166024820152604481018290526135d09084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161356c565b60025462010000900467ffffffffffffffff16421115611e1c57613991610d3b565b6003556002805469ffffffffffffffff00001916620100004267ffffffffffffffff1602179055565b6040516001600160a01b0380851660248301528316604482015260648101829052613a0b9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161356c565b50505050565b6000806000613a1e612056565b6040516363e320a160e11b815267ffffffffffffffff8716600482015261ffff821660248201526000604482018190529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7c6414290606401602060405180830381865afa158015613aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac691906142dc565b9050613ad560ff861683614751565b60405163151d468760e11b81526004810183905261ffff821660248201526000604482018190529195506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a3a8d0e90606401602060405180830381865afa158015613b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b749190614610565b6040516363e320a160e11b815267ffffffffffffffff8216600482015261ffff85166024820152600060448201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7c6414290606401602060405180830381865afa158015613bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1a91906142dc565b93505050509250929050565b8060ff168260ff161115613c5057604051630bc320f560e01b8152600a6004820152602401610e0a565b6002805460ff9283166101000261ffff199091169290931691909117919091179055565b6000613cc9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d599092919063ffffffff16565b8051909150156135d05780806020019051810190613ce7919061476c565b6135d05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610e0a565b606061307f848460008585600080866001600160a01b03168587604051613d809190614787565b60006040518083038185875af1925050503d8060008114613dbd576040519150601f19603f3d011682016040523d82523d6000602084013e613dc2565b606091505b5091509150612d968783838760608315613e3d578251600003613e36576001600160a01b0385163b613e365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e0a565b508161307f565b61307f8383815115613e525781518083602001fd5b8060405162461bcd60e51b8152600401610e0a91906147a3565b600060208284031215613e7e57600080fd5b5035919050565b610100810161180a8284805182526001600160a01b03602082015116602083015260ff60408201511660408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b60008060208385031215613efe57600080fd5b823567ffffffffffffffff80821115613f1657600080fd5b818501915085601f830112613f2a57600080fd5b813581811115613f3957600080fd5b8660208260051b8501011115613f4e57600080fd5b60209290920196919550909350505050565b61ffff811681146132bb57600080fd5b600060208284031215613f8257600080fd5b813561352081613f60565b602080825282518282018190526000919060409081850190868401855b82811015613fd857815180516001600160a01b03168552860151868501529284019290850190600101613faa565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561407f5761406b838551805182526001600160a01b03602082015116602083015260ff60408201511660408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b928401926101009290920191600101614001565b50909695505050505050565b6001600160a01b03811681146132bb57600080fd5b600080604083850312156140b357600080fd5b82356140be8161408b565b946020939093013593505050565b600080604083850312156140df57600080fd5b82356140ea8161408b565b915060208301356140fa8161408b565b809150509250929050565b803560ff8116811461411657600080fd5b919050565b6000806000806080858703121561413157600080fd5b8435935061414160208601614105565b925060408501356141518161408b565b9150606085013561416181613f60565b939692955090935050565b6000806040838503121561417f57600080fd5b8235915061418f60208401614105565b90509250929050565b67ffffffffffffffff811681146132bb57600080fd5b600080600080608085870312156141c457600080fd5b6141cd85614105565b93506141db60208601614105565b9250604085013561415181614198565b6000602082840312156141fd57600080fd5b81356135208161408b565b6000806040838503121561421b57600080fd5b61422483614105565b915061418f60208401614105565b60008060008060008060a0878903121561424b57600080fd5b86356142568161408b565b955060208701356142668161408b565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561429157600080fd5b818901915089601f8301126142a557600080fd5b8135818111156142b457600080fd5b8a60208285010111156142c657600080fd5b6020830194508093505050509295509295509295565b6000602082840312156142ee57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561180a5761180a6142f5565b808202811582820484141761180a5761180a6142f5565b8082018082111561180a5761180a6142f5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81511515815260208083015161ffff1690820152604080830151908201526060810161180a565b6040516060810167ffffffffffffffff811182821017156143cc57634e487b7160e01b600052604160045260246000fd5b60405290565b6000606082840312156143e457600080fd5b6143ec61439b565b82516143f781614198565b8152602083015163ffffffff8116811461441057600080fd5b602082015260408301516144238161408b565b60408201529392505050565b6000806000806080858703121561444557600080fd5b845161445081614198565b60208601516040870151606090970151919890975090945092505050565b67ffffffffffffffff828116828216039080821115611808576118086142f5565b6000600182016144a1576144a16142f5565b5060010190565b6000604082016001600160a01b0385168352602060408185015281855180845260609350838601915082870160005b828110156145145761450484835180511515825260208082015161ffff1690830152604090810151910152565b92850192908401906001016144d7565b509198975050505050505050565b805161411681613f60565b60006020828403121561453f57600080fd5b815161352081613f60565b600060e0828403121561455c57600080fd5b60405160e0810181811067ffffffffffffffff8211171561458d57634e487b7160e01b600052604160045260246000fd5b604052825161459b81614198565b815260208301516145ab81614198565b602082015260408301516145be81614198565b604082015260608301516145d181613f60565b60608201526145e260808401614522565b60808201526145f360a08401614522565b60a082015261460460c08401614522565b60c08201529392505050565b60006020828403121561462257600080fd5b815161352081614198565b60005b83811015614648578181015183820152602001614630565b50506000910152565b6000815180845261466981602086016020860161462d565b601f01601f19169290920160200192915050565b6001600160a01b038716815261ffff8616602082015267ffffffffffffffff8516604082015283606082015260ff8316608082015260c060a082015260006146c860c0830184614651565b98975050505050505050565b8051801515811461411657600080fd5b6000606082840312156146f657600080fd5b6146fe61439b565b614707836146d4565b8152602083015161471781613f60565b60208201526040928301519281019290925250919050565b60008261474c57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff818116838216019080821115611808576118086142f5565b60006020828403121561477e57600080fd5b613520826146d4565b6000825161479981846020870161462d565b9190910192915050565b602081526000613520602083018461465156fea2646970667358221220a8c625694e02c2240b1ccca45439c0d60d2dbbd59bc738e4a22f6664119b8e2364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102dc5760003560e01c806380f5560511610184578063aff25c14116100d6578063f09887301161008a578063f6c714d611610064578063f6c714d6146108fe578063fa1a5f591461091e578063fd235fda1461093457600080fd5b8063f09887301461088a578063f2fde38b146108aa578063f35509e4146108ca57600080fd5b8063d1d58b25116100bb578063d1d58b2514610830578063d45c241c14610850578063e5040c421461086a57600080fd5b8063aff25c14146107fa578063c30bdf481461081a57600080fd5b80638da5cb5b11610138578063a756377e11610112578063a756377e146107a5578063aa83a308146107ba578063afe517ee146107da57600080fd5b80638da5cb5b1461073857806391f7cfb91461075c578063a70329981461077157600080fd5b80638456cb59116101695780638456cb59146106d25780638757b15b146106e75780638d0525bb146106fc57600080fd5b806380f556051461067f5780638284511b146106b257600080fd5b806357ef74031161023d57806361f08f23116101f157806370d5ae05116101cb57806370d5ae0514610616578063715018a61461064a5780637aa660471461065f57600080fd5b806361f08f23146105905780636352211e146105bd5780636ba4c138146105f657600080fd5b80635c975abb116102225780635c975abb146104ff5780635ff2f2e81461053057806361d027b31461055d57600080fd5b806357ef7403146104aa5780635ac0d9c0146104bf57600080fd5b806345d30a17116102945780634b86a3d0116102795780634b86a3d01461042557806353701bc11461044557806354c5b6961461047957600080fd5b806345d30a17146103f0578063468e3e2f1461040557600080fd5b8063217a4b70116102c5578063217a4b70146103595780632495a599146103a55780633f4ba83a146103d957600080fd5b806310fc6172146102e157806314025dcd14610317575b600080fd5b3480156102ed57600080fd5b506103016102fc366004613e6c565b610947565b60405161030e9190613e85565b60405180910390f35b34801561032357600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161030e565b34801561036557600080fd5b5061038d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161030e565b3480156103b157600080fd5b5061038d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e557600080fd5b506103ee610d24565b005b3480156103fc57600080fd5b5061034b610d3b565b34801561041157600080fd5b506103ee610420366004613eeb565b610de8565b34801561043157600080fd5b506103ee610440366004613f70565b611614565b34801561045157600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048557600080fd5b5060025461049890610100900460ff1681565b60405160ff909116815260200161030e565b3480156104b657600080fd5b5061034b61164c565b3480156104cb57600080fd5b506002546104e69062010000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161030e565b34801561050b57600080fd5b5060005461052090600160b01b900460ff1681565b604051901515815260200161030e565b34801561053c57600080fd5b5061055061054b366004613eeb565b611705565b60405161030e9190613f8d565b34801561056957600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061038d565b34801561059c57600080fd5b506105b06105ab366004613eeb565b611810565b60405161030e9190613fe5565b3480156105c957600080fd5b5061038d6105d8366004613e6c565b6000908152600560205260409020600101546001600160a01b031690565b34801561060257600080fd5b506103ee610611366004613eeb565b61190f565b34801561062257600080fd5b5061038d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561065657600080fd5b506103ee611e0a565b34801561066b57600080fd5b506103ee61067a3660046140a0565b611e1e565b34801561068b57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061038d565b3480156106be57600080fd5b506103ee6106cd3660046140cc565b611e5e565b3480156106de57600080fd5b506103ee611f77565b3480156106f357600080fd5b506103ee611f94565b34801561070857600080fd5b50600254610725906a0100000000000000000000900461ffff1681565b60405161ffff909116815260200161030e565b34801561074457600080fd5b506000546201000090046001600160a01b031661038d565b34801561076857600080fd5b5061034b61203f565b34801561077d57600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b157600080fd5b50610725612056565b3480156107c657600080fd5b5061034b6107d536600461411b565b612335565b3480156107e657600080fd5b5061034b6107f536600461416c565b612b71565b34801561080657600080fd5b506103ee6108153660046141ae565b612da1565b34801561082657600080fd5b5061034b60035481565b34801561083c57600080fd5b5061034b61084b366004613e6c565b612f29565b34801561085c57600080fd5b506002546104989060ff1681565b34801561087657600080fd5b5061034b610885366004613e6c565b613087565b34801561089657600080fd5b506103ee6108a53660046141eb565b613127565b3480156108b657600080fd5b506103ee6108c53660046141eb565b61322e565b3480156108d657600080fd5b506107257f000000000000000000000000000000000000000000000000000000000000000081565b34801561090a57600080fd5b506103ee610919366004614208565b6132be565b34801561092a57600080fd5b5061034b60045481565b6103ee610942366004614232565b6132d0565b61099d6040518061010001604052806000815260200160006001600160a01b03168152602001600060ff168152602001600015158152602001600081526020016000815260200160008152602001600081525090565b6000828152600560209081526040808320815160e081018352815467ffffffffffffffff8082168352600160401b8204811695830195909552600160801b8104851693820193909352600160c01b90920490921660608201526001909101546001600160a01b038116608083015260ff600160a01b8204811660a0840152600160a81b90910416151560c082015290610a35846133e1565b60200151905060405180610100016040528085815260200183608001516001600160a01b031681526020018360a0015160ff1681526020018360c00151151581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663240ddd2e85600001516040518263ffffffff1660e01b8152600401610ad9919067ffffffffffffffff91909116815260200190565b602060405180830381865afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a91906142dc565b81526020848101516040516363e320a160e11b815267ffffffffffffffff909116600482015261ffff85166024820152600060448201529101906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7c6414290606401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906142dc565b81526040808501519051631206ee9760e11b815267ffffffffffffffff90911660048201526020909101906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063240ddd2e90602401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6991906142dc565b815260608401516040516363e320a160e11b815267ffffffffffffffff909116600482015261ffff84166024820152600060448201526020909101906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7c6414290606401602060405180830381865afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a91906142dc565b9052949350505050565b610d2c61349c565b6000805460ff60b01b19169055565b6002546000908190610d5d9062010000900467ffffffffffffffff164261430b565b9050610d89817f000000000000000000000000000000000000000000000000000000000000000061431e565b600354610d969190614335565b91507f0000000000000000000000000000000000000000000000000000000000000000821115610de4577f000000000000000000000000000000000000000000000000000000000000000091505b5090565b600154600114610e1357604051630bc320f560e01b8152600260048201526024015b60405180910390fd5b600260015560008167ffffffffffffffff811115610e3357610e33614348565b604051908082528060200260200182016040528015610e7e57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610e515790505b50905060005b8281101561121c576000848483818110610ea057610ea061435e565b60209081029290920135600081815260058452604090819020815160e081018352815467ffffffffffffffff8082168352600160401b8204811697830197909752600160801b8104871693820193909352600160c01b90920490941660608201526001909301546001600160a01b0381166080850181905260ff600160a01b8304811660a0870152600160a81b909204909116151560c085015290935033149050610f6157604051630bc320f560e01b815260006004820152602401610e0a565b6000610f6c836133e1565b905080858581518110610f8157610f8161435e565b60200260200101819052508160c00151610f9d5750505061120c565b604051634cd9c08160e11b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399b3810290610fec908590600401614374565b606060405180830381865afa158015611009573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102d91906143d2565b51604051635fec377960e01b81529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635fec377990611080908690600401614374565b608060405180830381865afa15801561109d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c1919061442f565b505050905080826110d2919061446e565b67ffffffffffffffff166060850181905260208501516110f2919061446e565b67ffffffffffffffff9081166040808701918252600060c08801818152988152600560209081529190208751815492890151935160608a01518616600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff918716600160801b02919091166fffffffffffffffffffffffffffffffff958716600160401b026fffffffffffffffffffffffffffffffff1990951692909616919091179290921792909216929092179190911781556080850151600191909101805460a09096015196511515600160a81b0260ff60a81b1960ff909816600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199097166001600160a01b03909316929092179590951795909516949094179092555050505b6112158161448f565b9050610e84565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a891906142dc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611312573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133691906142dc565b6040517fdfdc93880000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dfdc9388906113a090309087906004016144a8565b600060405180830381600087803b1580156113ba57600080fd5b505af11580156113ce573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f91906142dc565b611469919061430b565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f991906142dc565b611503919061430b565b9050600061153d6115347f00000000000000000000000000000000000000000000000000000000000000008461431e565b620f42406134fd565b90506115936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613527565b6115d2336115a1838561430b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613527565b6116066001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385613527565b505060018055505050505050565b61161c61349c565b6002805461ffff9092166a0100000000000000000000026bffff0000000000000000000019909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a204d0c611685612056565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401602060405180830381865afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170091906142dc565b905090565b60608167ffffffffffffffff81111561172057611720614348565b60405190808252806020026020018201604052801561176557816020015b604080518082019091526000808252602082015281526020019060019003908161173e5790505b50905060005b82811015611808576040518060400160405280600560008787868181106117945761179461435e565b6020908102929092013583525081810192909252604001600020600101546001600160a01b03168252018585848181106117d0576117d061435e565b905060200201358152508282815181106117ec576117ec61435e565b6020026020010181905250806118019061448f565b905061176b565b505b92915050565b60608167ffffffffffffffff81111561182b5761182b614348565b6040519080825280602002602001820160405280156118b257816020015b61189f6040518061010001604052806000815260200160006001600160a01b03168152602001600060ff168152602001600015158152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816118495790505b50905060005b82811015611808576118e18484838181106118d5576118d561435e565b90506020020135610947565b8282815181106118f3576118f361435e565b6020026020010181905250806119089061448f565b90506118b8565b60015460011461193557604051630bc320f560e01b815260026004820152602401610e0a565b600260015560005b81811015611e015760008084848481811061195a5761195a61435e565b60209081029290920135600081815260058452604090819020815160e081018352815467ffffffffffffffff8082168352600160401b8204811697830197909752600160801b8104871693820193909352600160c01b90920490941660608201526001909301546001600160a01b038116608085015260ff600160a01b8204811660a0860152600160a81b90910416151560c084018190529093509050611a0357505050611df1565b6000611a0e836133e1565b9050611a1a82826135d5565b611a249085614335565b6040516370a0823160e01b81523060048201529094506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab291906142dc565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166375375e9633611aed85613746565b6040518363ffffffff1660e01b8152600401611b0a9291906144a8565b600060405180830381600087803b158015611b2457600080fd5b505af1158015611b38573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc691906142dc565b611bd0919061430b565b611bda9086614335565b94508415611deb576080830151611c1c906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169087613527565b604051634cd9c08160e11b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399b3810290611c6b908690600401614374565b606060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac91906143d2565b516020850151909150611cc090829061446e565b67ffffffffffffffff90811660408601819052602086015190911603611ce857600060c08501525b50600084815260056020908152604091829020855181549287015193870151606088015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff928216600160801b02929092166fffffffffffffffffffffffffffffffff968216600160401b026fffffffffffffffffffffffffffffffff19909616919093161793909317939093169290921717815560808401516001909101805460a086015160c08701511515600160a81b0260ff60a81b1960ff909216600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199093166001600160a01b039095169490941791909117169190911790555b50505050505b611dfa8161448f565b905061193d565b50506001805550565b611e1261349c565b611e1c60006137b0565b565b611e2661349c565b611e5a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383613527565b5050565b611e6661349c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480611ed757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b15611ef857604051630bc320f560e01b815260076004820152602401610e0a565b6040516370a0823160e01b8152306004820152611e5a9082906001600160a01b038516906370a0823190602401602060405180830381865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6691906142dc565b6001600160a01b0385169190613527565b611f7f61349c565b6000805460ff60b01b1916600160b01b179055565b611fe96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000613821565b611e1c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019613821565b600060045461204c610d3b565b611700919061430b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c9ed23766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db919061452d565b60028054600094509192506a010000000000000000000090910461ffff1690835b8261ffff168110156122f95760405163092337eb60e21b815261ffff851660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063248cdfac9060240160e060405180830381865afa158015612173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612197919061454a565b9050811580156121b15750805167ffffffffffffffff1642145b1561224d5760405163092337eb60e21b815261ffff6000199690960195861660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063248cdfac9060240160e060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a919061454a565b90505b805167ffffffffffffffff166000036122c1577f000000000000000000000000000000000000000000000000000000000000000061ffff168661ffff1610156122bb577f00000000000000000000000000000000000000000000000000000000000000009550505050505090565b506122f9565b8561ffff16816080015161ffff1611156122dd57806080015195505b5092819003926002909102906122f28161448f565b90506120fc565b508361ffff1660000361232f577f0000000000000000000000000000000000000000000000000000000000000000935050505090565b50505090565b600060015460011461235d57604051630bc320f560e01b815260026004820152602401610e0a565b6002600155600054600160b01b900460ff161561239057604051630bc320f560e01b815260016004820152602401610e0a565b600254849060ff610100909104811690821611806123b6575060025460ff908116908216105b156123d757604051630bc320f560e01b8152600a6004820152602401610e0a565b6123df61396f565b60405163441055f560e01b815260048101879052600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441055f590604401602060405180830381865afa15801561244e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124729190614610565b604051631206ee9760e11b815267ffffffffffffffff821660048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063240ddd2e90602401602060405180830381865afa1580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250791906142dc565b965061253e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308a6139ba565b60008061254b8389613a11565b915091508061255861203f565b101561257a57604051630bc320f560e01b815260036004820152602401610e0a565b8561ffff168261ffff1611156125a657604051630bc320f560e01b815260056004820152602401610e0a565b6000806001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663bfc18aef308684876002826040519080825280601f01601f191660200182016040528015612609576020820181803683370190505b506040518763ffffffff1660e01b815260040161262b9695949392919061467d565b6020604051808303816000875af115801561264a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266e91906142dc565b9050600019810361269557604051630bc320f560e01b815260066004820152602401610e0a565b604080516060810182526000815261ffff8616602082015280820183905290517fc776d5830000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c776d58390612717908490600401614374565b602060405180830381865afa158015612734573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275891906142dc565b604051634cd9c08160e11b81529098506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906399b38102906127a7908490600401614374565b606060405180830381865afa1580156127c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e891906143d2565b60000151925050506040518060e001604052808567ffffffffffffffff1681526020018267ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001896001600160a01b031681526020018a60ff168152602001600115158152506005600088815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160010160146101000a81548160ff021916908360ff16021790555060c08201518160010160156101000a81548160ff02191690831515021790555090505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7c64142838660006040518463ffffffff1660e01b8152600401612a129392919067ffffffffffffffff93909316835261ffff9190911660208301521515604082015260600190565b602060405180830381865afa158015612a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5391906142dc565b905080600003612a7957604051630bc320f560e01b815260066004820152602401610e0a565b604080518c815260ff8c16602082015290810182905287906001600160a01b038b169033907f267dddb881e07bcf2b2f2fea4452c4a4a99ac8577aaf7c026f68210185fb90479060600160405180910390a46040517f37df00c9000000000000000000000000000000000000000000000000000000008152600481018c90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906337df00c990602401600060405180830381600087803b158015612b4657600080fd5b505af1158015612b5a573d6000803e3d6000fd5b50506001805550969b9a5050505050505050505050565b600254600090829060ff61010090910481169082161180612b9a575060025460ff908116908216105b15612bbb57604051630bc320f560e01b8152600a6004820152602401610e0a565b60405163441055f560e01b815260048101859052600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441055f590604401602060405180830381865afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190614610565b9050600080612c5d8387613a11565b60405163151d468760e11b81526004810182905261ffff831660248201526000604482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7c64142908290632a3a8d0e90606401602060405180830381865afa158015612ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d049190614610565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff909116600482015261ffff8516602482015260006044820152606401602060405180830381865afa158015612d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9691906142dc565b979650505050505050565b600054610100900460ff1615808015612dc15750600054600160ff909116105b80612ddb5750303b158015612ddb575060005460ff166001145b612e4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610e0a565b6000805460ff191660011790558015612e70576000805461ff0019166101001790555b612e7960018055565b612e82336137b0565b612e8c8585613c26565b600280546bffffffffffffffffffff000019166201000067ffffffffffffffff8616026bffff000000000000000000001916176a010000000000000000000061ffff851602179055612edc611f94565b8015612f22576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600080612f35836133e1565b600084815260056020908152604091829020825160e081018452815467ffffffffffffffff8082168352600160401b8204811694830194909452600160801b8104841694820194909452600160c01b9093049091166060830152600101546001600160a01b038116608083015260ff600160a01b8204811660a0840152600160a81b90910416151560c0820181905291925090612fd6575060009392505050565b604051635fec377960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635fec377990613022908590600401614374565b608060405180830381865afa15801561303f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613063919061442f565b509094506130759150829050836135d5565b61307f9084614335565b949350505050565b6000818152600560209081526040808320815160e081018352815467ffffffffffffffff8082168352600160401b8204811695830195909552600160801b8104851693820193909352600160c01b90920490921660608201526001909101546001600160a01b038116608083015260ff600160a01b8204811660a0840152600160a81b90910416151560c082015261180a90613122846133e1565b6135d5565b61312f61349c565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ba91906142dc565b90507f0000000000000000000000000000000000000000000000000000000000000000600454826131eb9190614335565b1115611e5a57611e5a827f0000000000000000000000000000000000000000000000000000000000000000600454846132249190614335565b6115a1919061430b565b61323661349c565b6001600160a01b0381166132b25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610e0a565b6132bb816137b0565b50565b6132c661349c565b611e5a8282613c26565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461331c57604051630bc320f560e01b815260006004820152602401610e0a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031614801561338e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b6133ae57604051630bc320f560e01b815260076004820152602401610e0a565b6133c26001600160a01b0387163386613527565b83600460008282546133d49190614335565b9091555050505050505050565b604080516060810182526000808252602082018190528183015290517fdc20c6fa000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dc20c6fa90602401606060405180830381865afa158015613478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a91906146e4565b6000546001600160a01b0362010000909104163314611e1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e0a565b600081600161350c8286614335565b613516919061430b565b613520919061472f565b9392505050565b6040516001600160a01b0383166024820152604481018290526135d09084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613c74565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399b38102846040518263ffffffff1660e01b81526004016136249190614374565b606060405180830381865afa158015613641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366591906143d2565b60000151905060008460400151828660200151613682919061446e565b61368c919061446e565b90508067ffffffffffffffff166000036136ab5760009250505061180a565b604051631206ee9760e11b815267ffffffffffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063240ddd2e90602401602060405180830381865afa158015613719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373d91906142dc565b95945050505050565b604080516001808252818301909252606091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161375d57905050905081816000815181106137a0576137a061435e565b6020026020010181905250919050565b600080546001600160a01b03838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b8015806138b457506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561388e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b291906142dc565b155b6139265760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610e0a565b6040516001600160a01b0383166024820152604481018290526135d09084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161356c565b60025462010000900467ffffffffffffffff16421115611e1c57613991610d3b565b6003556002805469ffffffffffffffff00001916620100004267ffffffffffffffff1602179055565b6040516001600160a01b0380851660248301528316604482015260648101829052613a0b9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161356c565b50505050565b6000806000613a1e612056565b6040516363e320a160e11b815267ffffffffffffffff8716600482015261ffff821660248201526000604482018190529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7c6414290606401602060405180830381865afa158015613aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac691906142dc565b9050613ad560ff861683614751565b60405163151d468760e11b81526004810183905261ffff821660248201526000604482018190529195506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a3a8d0e90606401602060405180830381865afa158015613b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b749190614610565b6040516363e320a160e11b815267ffffffffffffffff8216600482015261ffff85166024820152600060448201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7c6414290606401602060405180830381865afa158015613bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1a91906142dc565b93505050509250929050565b8060ff168260ff161115613c5057604051630bc320f560e01b8152600a6004820152602401610e0a565b6002805460ff9283166101000261ffff199091169290931691909117919091179055565b6000613cc9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d599092919063ffffffff16565b8051909150156135d05780806020019051810190613ce7919061476c565b6135d05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610e0a565b606061307f848460008585600080866001600160a01b03168587604051613d809190614787565b60006040518083038185875af1925050503d8060008114613dbd576040519150601f19603f3d011682016040523d82523d6000602084013e613dc2565b606091505b5091509150612d968783838760608315613e3d578251600003613e36576001600160a01b0385163b613e365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e0a565b508161307f565b61307f8383815115613e525781518083602001fd5b8060405162461bcd60e51b8152600401610e0a91906147a3565b600060208284031215613e7e57600080fd5b5035919050565b610100810161180a8284805182526001600160a01b03602082015116602083015260ff60408201511660408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b60008060208385031215613efe57600080fd5b823567ffffffffffffffff80821115613f1657600080fd5b818501915085601f830112613f2a57600080fd5b813581811115613f3957600080fd5b8660208260051b8501011115613f4e57600080fd5b60209290920196919550909350505050565b61ffff811681146132bb57600080fd5b600060208284031215613f8257600080fd5b813561352081613f60565b602080825282518282018190526000919060409081850190868401855b82811015613fd857815180516001600160a01b03168552860151868501529284019290850190600101613faa565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561407f5761406b838551805182526001600160a01b03602082015116602083015260ff60408201511660408301526060810151151560608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b928401926101009290920191600101614001565b50909695505050505050565b6001600160a01b03811681146132bb57600080fd5b600080604083850312156140b357600080fd5b82356140be8161408b565b946020939093013593505050565b600080604083850312156140df57600080fd5b82356140ea8161408b565b915060208301356140fa8161408b565b809150509250929050565b803560ff8116811461411657600080fd5b919050565b6000806000806080858703121561413157600080fd5b8435935061414160208601614105565b925060408501356141518161408b565b9150606085013561416181613f60565b939692955090935050565b6000806040838503121561417f57600080fd5b8235915061418f60208401614105565b90509250929050565b67ffffffffffffffff811681146132bb57600080fd5b600080600080608085870312156141c457600080fd5b6141cd85614105565b93506141db60208601614105565b9250604085013561415181614198565b6000602082840312156141fd57600080fd5b81356135208161408b565b6000806040838503121561421b57600080fd5b61422483614105565b915061418f60208401614105565b60008060008060008060a0878903121561424b57600080fd5b86356142568161408b565b955060208701356142668161408b565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561429157600080fd5b818901915089601f8301126142a557600080fd5b8135818111156142b457600080fd5b8a60208285010111156142c657600080fd5b6020830194508093505050509295509295509295565b6000602082840312156142ee57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561180a5761180a6142f5565b808202811582820484141761180a5761180a6142f5565b8082018082111561180a5761180a6142f5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81511515815260208083015161ffff1690820152604080830151908201526060810161180a565b6040516060810167ffffffffffffffff811182821017156143cc57634e487b7160e01b600052604160045260246000fd5b60405290565b6000606082840312156143e457600080fd5b6143ec61439b565b82516143f781614198565b8152602083015163ffffffff8116811461441057600080fd5b602082015260408301516144238161408b565b60408201529392505050565b6000806000806080858703121561444557600080fd5b845161445081614198565b60208601516040870151606090970151919890975090945092505050565b67ffffffffffffffff828116828216039080821115611808576118086142f5565b6000600182016144a1576144a16142f5565b5060010190565b6000604082016001600160a01b0385168352602060408185015281855180845260609350838601915082870160005b828110156145145761450484835180511515825260208082015161ffff1690830152604090810151910152565b92850192908401906001016144d7565b509198975050505050505050565b805161411681613f60565b60006020828403121561453f57600080fd5b815161352081613f60565b600060e0828403121561455c57600080fd5b60405160e0810181811067ffffffffffffffff8211171561458d57634e487b7160e01b600052604160045260246000fd5b604052825161459b81614198565b815260208301516145ab81614198565b602082015260408301516145be81614198565b604082015260608301516145d181613f60565b60608201526145e260808401614522565b60808201526145f360a08401614522565b60a082015261460460c08401614522565b60c08201529392505050565b60006020828403121561462257600080fd5b815161352081614198565b60005b83811015614648578181015183820152602001614630565b50506000910152565b6000815180845261466981602086016020860161462d565b601f01601f19169290920160200192915050565b6001600160a01b038716815261ffff8616602082015267ffffffffffffffff8516604082015283606082015260ff8316608082015260c060a082015260006146c860c0830184614651565b98975050505050505050565b8051801515811461411657600080fd5b6000606082840312156146f657600080fd5b6146fe61439b565b614707836146d4565b8152602083015161471781613f60565b60208201526040928301519281019290925250919050565b60008261474c57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff818116838216019080821115611808576118086142f5565b60006020828403121561477e57600080fd5b613520826146d4565b6000825161479981846020870161462d565b9190910192915050565b602081526000613520602083018461465156fea2646970667358221220a8c625694e02c2240b1ccca45439c0d60d2dbbd59bc738e4a22f6664119b8e2364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 119,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 122,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3742,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "paused",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3784,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "_locked",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1292,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "minBonus",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 1295,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "maxBonus",
        "offset": 1,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 1298,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "lastReleasedAt",
        "offset": 2,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 1301,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "sampleSize",
        "offset": 10,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 1304,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "lastRecordedReleasedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1307,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "soldAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1312,
        "contract": "contracts/MangoBondPool.sol:MangoBondPool",
        "label": "_bonds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Bond)3440_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bond)3440_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondPool.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)3440_storage"
      },
      "t_struct(Bond)3440_storage": {
        "encoding": "inplace",
        "label": "struct IBondPool.Bond",
        "members": [
          {
            "astId": 3427,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "spentRawAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3429,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "purchasedRawAmount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3431,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "claimedRawAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3433,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "canceledRawAmount",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3435,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3437,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "bonus",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3439,
            "contract": "contracts/MangoBondPool.sol:MangoBondPool",
            "label": "isValid",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
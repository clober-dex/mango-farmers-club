{
  "address": "0x2e2668485C7B5630805e5241a458c6aD136293EC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "MangoError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Plant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unplant",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "globalRewardSnapshot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardPerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStakedToken.GlobalRewardSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "name": "harvestableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakedToken.HarvestableReward[]",
          "name": "rewardList",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "harvestableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakedToken.HarvestableReward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "rewardTokens_",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "treasuries_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "plant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supplyReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "unplant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "userRewardSnapshot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardPerToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestableReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakedToken.UserRewardSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawLostERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a09570cd5b1ed55d19bf1a4c5e81e682e037e9608be5dba5af6ebf523a00abe",
  "receipt": {
    "to": null,
    "from": "0x62e5E8D25c88D9c4b67f09c46D96C9ECD3864757",
    "contractAddress": "0x2e2668485C7B5630805e5241a458c6aD136293EC",
    "transactionIndex": 0,
    "gasUsed": "2443389",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000000000010000000001000000000000000000000000100000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x99c0802b3a46a428d88c4cde221b1b839bd14a85490c778bcd499ff833e6dc65",
    "transactionHash": "0x0a09570cd5b1ed55d19bf1a4c5e81e682e037e9608be5dba5af6ebf523a00abe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 166497,
        "transactionHash": "0x0a09570cd5b1ed55d19bf1a4c5e81e682e037e9608be5dba5af6ebf523a00abe",
        "address": "0x2e2668485C7B5630805e5241a458c6aD136293EC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000062e5e8d25c88d9c4b67f09c46d96c9ecd3864757"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x99c0802b3a46a428d88c4cde221b1b839bd14a85490c778bcd499ff833e6dc65"
      }
    ],
    "blockNumber": 166497,
    "cumulativeGasUsed": "2443389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1fA03eDB1B8839a5319A7D2c1Ae6AAE492342bAD"
  ],
  "numDeployments": 1,
  "solcInputHash": "9b43978420c0ff4c6bcbca9d11f7d35a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"MangoError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Plant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unplant\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"globalRewardSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct IStakedToken.GlobalRewardSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"harvestableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakedToken.HarvestableReward[]\",\"name\":\"rewardList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"harvestableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakedToken.HarvestableReward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"treasuries_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"plant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unplant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"userRewardSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakedToken.UserRewardSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawLostERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MangoStakedToken.sol\":\"MangoStakedToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    error MangoError(uint256 errorCode);\\n\\n    uint256 public constant ACCESS = 0;\\n    uint256 public constant PAUSED = 1;\\n    uint256 public constant REENTRANCY = 2;\\n    uint256 public constant INSUFFICIENT_BALANCE = 3;\\n    uint256 public constant EXCEEDED_BALANCE = 4;\\n    uint256 public constant SLIPPAGE = 5;\\n    uint256 public constant AMOUNT_TOO_SMALL = 6;\\n    uint256 public constant INVALID_ADDRESS = 7;\\n    uint256 public constant INVALID_TIME = 8;\\n    uint256 public constant INVALID_FEE = 9;\\n    uint256 public constant INVALID_BONUS = 10;\\n}\\n\",\"keccak256\":\"0x503efb79fbac2341d34158887d870049d9c45cccf1235e7bfd86ea398cf9ba9c\",\"license\":\"MIT\"},\"contracts/MangoStakedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IStakedToken.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/Pausable.sol\\\";\\n\\ncontract MangoStakedToken is IStakedToken, ERC20, Ownable, Pausable, Initializable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant _RATE_PRECISION = 1e28;\\n\\n    address public immutable override underlyingToken;\\n\\n    address[] private _rewardTokens;\\n    // token => snapshot\\n    mapping(address => GlobalRewardSnapshot) private _globalRewardSnapshot;\\n    // user => token => snapshot\\n    mapping(address => mapping(address => UserRewardSnapshot)) private _userRewardSnapshot;\\n\\n    modifier updateReward(address user) {\\n        {\\n            if (totalSupply() > 0) {\\n                uint256 userBalance = balanceOf(user);\\n                address[] memory mRewardTokens = _rewardTokens;\\n                for (uint256 i = 0; i < mRewardTokens.length; ++i) {\\n                    address token = mRewardTokens[i];\\n                    address treasury = _globalRewardSnapshot[token].treasury;\\n                    if (block.timestamp > ITreasury(treasury).lastDistributedAt()) {\\n                        ITreasury(treasury).distribute();\\n                    }\\n                    if (user != address(0)) {\\n                        uint256 globalRewardPerToken = _globalRewardSnapshot[token].rewardPerToken;\\n                        _userRewardSnapshot[user][token] = UserRewardSnapshot({\\n                            rewardPerToken: globalRewardPerToken,\\n                            harvestableReward: _harvestableReward(user, token, globalRewardPerToken, userBalance)\\n                        });\\n                    }\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor(address underlyingToken_) ERC20(\\\"Planted Mango\\\", \\\"pMANGO\\\") {\\n        underlyingToken = underlyingToken_;\\n    }\\n\\n    function initialize(address[] calldata rewardTokens_, address[] calldata treasuries_) external initializer {\\n        _initReentrancyGuard();\\n        _transferOwnership(msg.sender);\\n        for (uint256 i = 0; i < rewardTokens_.length; ++i) {\\n            // @dev Assume that rewardTokens_ does not have duplicated elements.\\n            // @dev Assume that the length of two arrays is the same.\\n            _addRewardToken(rewardTokens_[i], treasuries_[i]);\\n        }\\n    }\\n\\n    function name() public pure override(IERC20Metadata, ERC20) returns (string memory) {\\n        return \\\"Planted Mango\\\";\\n    }\\n\\n    function symbol() public pure override(IERC20Metadata, ERC20) returns (string memory) {\\n        return \\\"pMANGO\\\";\\n    }\\n\\n    function _transfer(address, address, uint256) internal pure override {\\n        revert Errors.MangoError(Errors.ACCESS);\\n    }\\n\\n    function rewardToken(uint256 index) external view returns (address) {\\n        return _rewardTokens[index];\\n    }\\n\\n    function rewardTokens() external view returns (address[] memory) {\\n        return _rewardTokens;\\n    }\\n\\n    function rewardTokensLength() external view returns (uint256) {\\n        return _rewardTokens.length;\\n    }\\n\\n    function globalRewardSnapshot(address token) external view returns (GlobalRewardSnapshot memory) {\\n        return _globalRewardSnapshot[token];\\n    }\\n\\n    function userRewardSnapshot(address user, address token) external view returns (UserRewardSnapshot memory) {\\n        return _userRewardSnapshot[user][token];\\n    }\\n\\n    function harvestableRewards(address user) external view returns (HarvestableReward[] memory) {\\n        return harvestableRewards(user, _rewardTokens);\\n    }\\n\\n    function harvestableRewards(\\n        address user,\\n        address[] memory tokenList\\n    ) public view returns (HarvestableReward[] memory rewardList) {\\n        rewardList = new HarvestableReward[](tokenList.length);\\n        uint256 totalStakedAmount = totalSupply();\\n        uint256 userBalance = balanceOf(user);\\n        for (uint256 i = 0; i < tokenList.length; ++i) {\\n            address token = tokenList[i];\\n            uint256 reward;\\n            if (totalStakedAmount > 0) {\\n                GlobalRewardSnapshot memory mGlobalRewardSnapshot = _globalRewardSnapshot[token];\\n                uint256 distributableAmount = ITreasury(mGlobalRewardSnapshot.treasury).getDistributableAmount();\\n                uint256 newRewardPerToken = mGlobalRewardSnapshot.rewardPerToken +\\n                    (distributableAmount * _RATE_PRECISION) /\\n                    totalStakedAmount;\\n                reward = _harvestableReward(user, token, newRewardPerToken, userBalance);\\n            }\\n            rewardList[i] = HarvestableReward({token: token, amount: reward});\\n        }\\n    }\\n\\n    function _harvestableReward(\\n        address user,\\n        address token,\\n        uint256 globalRewardPerToken,\\n        uint256 userBalance\\n    ) internal view returns (uint256) {\\n        UserRewardSnapshot memory mUserRewardSnapshot = _userRewardSnapshot[user][token];\\n        return\\n            (userBalance * (globalRewardPerToken - mUserRewardSnapshot.rewardPerToken)) /\\n            _RATE_PRECISION +\\n            mUserRewardSnapshot.harvestableReward;\\n    }\\n\\n    function plant(uint256 amount, address to) external nonReentrant whenNotPaused updateReward(to) {\\n        IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\\n        _mint(to, amount);\\n        emit Plant(msg.sender, to, amount);\\n    }\\n\\n    function unplant(uint256 amount, address to) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        _burn(msg.sender, amount);\\n        emit Unplant(msg.sender, to, amount);\\n        IERC20(underlyingToken).safeTransfer(to, amount);\\n    }\\n\\n    function harvest(address user) external {\\n        harvest(user, _rewardTokens);\\n    }\\n\\n    function harvest(address user, address[] memory tokenList) public nonReentrant whenNotPaused updateReward(user) {\\n        for (uint256 i = 0; i < tokenList.length; ++i) {\\n            address token = tokenList[i];\\n            uint256 reward = _userRewardSnapshot[user][token].harvestableReward;\\n            if (reward > 0) {\\n                _userRewardSnapshot[user][token].harvestableReward = 0;\\n                emit Harvest(user, token, reward);\\n                IERC20(token).safeTransfer(user, reward);\\n            }\\n        }\\n    }\\n\\n    function supplyReward(address token, uint256 amount) external returns (uint256) {\\n        GlobalRewardSnapshot memory mGlobalRewardSnapshot = _globalRewardSnapshot[token];\\n        if (mGlobalRewardSnapshot.treasury != msg.sender) {\\n            revert Errors.MangoError(Errors.ACCESS);\\n        }\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        uint256 totalStakedAmount = totalSupply();\\n        if (totalStakedAmount == 0) {\\n            return 0;\\n        }\\n        uint256 rewardPerTokenIncrement = (amount * _RATE_PRECISION) / totalStakedAmount;\\n        if (rewardPerTokenIncrement == 0) {\\n            return 0;\\n        }\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        mGlobalRewardSnapshot.rewardPerToken += rewardPerTokenIncrement;\\n        mGlobalRewardSnapshot.timestamp = uint64(block.timestamp);\\n\\n        emit DistributeReward(msg.sender, token, amount, mGlobalRewardSnapshot.rewardPerToken, totalStakedAmount);\\n        _globalRewardSnapshot[token] = mGlobalRewardSnapshot;\\n        return amount;\\n    }\\n\\n    function addRewardToken(address newRewardToken, address treasury) external onlyOwner {\\n        _addRewardToken(newRewardToken, treasury);\\n    }\\n\\n    function _addRewardToken(address newRewardToken, address treasury) internal {\\n        if (_globalRewardSnapshot[newRewardToken].timestamp != 0) {\\n            revert Errors.MangoError(Errors.ACCESS);\\n        }\\n        if (ITreasury(treasury).rewardToken() != newRewardToken) {\\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\\n        }\\n        _rewardTokens.push(newRewardToken);\\n        _globalRewardSnapshot[newRewardToken] = GlobalRewardSnapshot({\\n            rewardPerToken: 0,\\n            treasury: treasury,\\n            timestamp: uint64(block.timestamp)\\n        });\\n    }\\n\\n    function withdrawLostERC20(address token, address to) external onlyOwner {\\n        if (token == underlyingToken || _globalRewardSnapshot[token].timestamp > 0) {\\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\\n        }\\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x389b7529a94eda2cc1cf7c2b6ee00638bbfb2dc1cd9a848b3f663b20a28dbb85\",\"license\":\"MIT\"},\"contracts/interfaces/IStakedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IStakedToken is IERC20Metadata {\\n    event Plant(address indexed sender, address indexed user, uint256 amount);\\n    event Unplant(address indexed user, address indexed to, uint256 amount);\\n    event Harvest(address indexed user, address indexed token, uint256 amount);\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 rewardPerToken,\\n        uint256 totalSupply\\n    );\\n\\n    struct GlobalRewardSnapshot {\\n        uint256 rewardPerToken;\\n        address treasury;\\n        uint64 timestamp;\\n    }\\n\\n    struct UserRewardSnapshot {\\n        uint256 rewardPerToken;\\n        uint256 harvestableReward;\\n    }\\n\\n    struct HarvestableReward {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function rewardToken(uint256 index) external view returns (address);\\n\\n    function rewardTokens() external view returns (address[] memory);\\n\\n    function rewardTokensLength() external view returns (uint256);\\n\\n    function globalRewardSnapshot(address token) external view returns (GlobalRewardSnapshot memory);\\n\\n    function userRewardSnapshot(address user, address token) external view returns (UserRewardSnapshot memory);\\n\\n    function harvestableRewards(address user) external view returns (HarvestableReward[] memory);\\n\\n    function harvestableRewards(\\n        address user,\\n        address[] calldata tokenList\\n    ) external view returns (HarvestableReward[] memory);\\n\\n    function plant(uint256 amount, address to) external;\\n\\n    function unplant(uint256 amount, address to) external;\\n\\n    function harvest(address user) external;\\n\\n    function harvest(address user, address[] calldata tokenList) external;\\n\\n    function supplyReward(address rewardToken, uint256 amount) external returns (uint256);\\n\\n    function addRewardToken(address rewardToken, address treasury) external;\\n\\n    function withdrawLostERC20(address token, address to) external;\\n}\\n\",\"keccak256\":\"0xd76f2cd7c90efc5947521ed48a5c9ab960697b54e79a7afd50096756191d72b8\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenReceiver {\\n    /**\\n     * @notice Emitted when tokens are received.\\n     * @param sender The address of the sender.\\n     * @param amount The amount of tokens received.\\n     */\\n    event Receive(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice Returns the address of the receivable token.\\n     * @return The address of the receivable token.\\n     */\\n    function receivingToken() external view returns (address);\\n\\n    /**\\n     * @notice Allows the contract to receive tokens.\\n     * @param amount The amount of tokens to be received.\\n     */\\n    function receiveToken(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xe08100d8e6640f3541f363fc4aec97837a6ec55eb20b43a47916a2ce6f2223ae\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITokenReceiver.sol\\\";\\n\\ninterface ITreasury is ITokenReceiver {\\n    event Distribute(uint256 amount, uint256 elapsed);\\n\\n    function stakedToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function lastDistributedAt() external view returns (uint256);\\n\\n    // precision 18\\n    // tokens per second\\n    function rewardRate() external view returns (uint256);\\n\\n    function getDistributableAmount() external view returns (uint256);\\n\\n    function distribute() external;\\n\\n    function withdrawLostERC20(address token, address to) external;\\n}\\n\",\"keccak256\":\"0x31a2427dec4c340b607a02e36715ba8c77f29f43f32f023425b3be4382209739\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../Errors.sol\\\";\\n\\nabstract contract Pausable is Ownable {\\n    bool public paused;\\n\\n    modifier whenNotPaused() {\\n        if (paused) {\\n            revert Errors.MangoError(Errors.PAUSED);\\n        }\\n        _;\\n    }\\n\\n    function pause() external onlyOwner {\\n        paused = true;\\n    }\\n\\n    function unpause() external onlyOwner {\\n        paused = false;\\n    }\\n}\\n\",\"keccak256\":\"0x4e8c9e07c8506a8e2638246cee572920bb53e7c1c9191615a4ae644a9d7d64e4\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../Errors.sol\\\";\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Mango (https://github.com/mango/core/blob/main/contracts/ReentrancyGuard.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 internal _locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        if (_locked != 1) {\\n            revert Errors.MangoError(Errors.REENTRANCY);\\n        }\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n\\n    function _initReentrancyGuard() internal {\\n        _locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x5afefa70ee3bdb0ee3de1dc1e6cb477ffccea8a7b89f2ad66b610a16c1648d6c\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405260016006553480156200001657600080fd5b5060405162002c7638038062002c76833981016040819052620000399162000123565b6040518060400160405280600d81526020016c506c616e746564204d616e676f60981b81525060405180604001604052806006815260200165704d414e474f60d01b81525081600390816200008f9190620001fa565b5060046200009e8282620001fa565b505050620000bb620000b5620000cd60201b60201c565b620000d1565b6001600160a01b0316608052620002c6565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200013657600080fd5b81516001600160a01b03811681146200014e57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200018057607f821691505b602082108103620001a157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001f557600081815260208120601f850160051c81016020861015620001d05750805b601f850160051c820191505b81811015620001f157828155600101620001dc565b5050505b505050565b81516001600160401b0381111562000216576200021662000155565b6200022e816200022784546200016b565b84620001a7565b602080601f8311600181146200026657600084156200024d5750858301515b600019600386901b1c1916600185901b178555620001f1565b600085815260208120601f198616915b82811015620002975788860151825594840194600190910190840162000276565b5085821015620002b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161297f620002f760003960008181610303015281816111420152818161160b01526119b3015261297f6000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80636026377a1161012a578063a457c2d7116100bd578063c2b18aa01161008c578063f2fde38b11610071578063f2fde38b14610593578063f305ce47146105a6578063f6678d0e1461061d57600080fd5b8063c2b18aa014610545578063dd62ed3e1461055a57600080fd5b8063a457c2d714610504578063a9059cbb14610517578063bf199e621461052a578063c102498b1461053257600080fd5b80638284511b116100f95780638284511b1461049f5780638456cb59146104b25780638da5cb5b146104ba57806395d89b41146104cb57600080fd5b80636026377a1461044857806370a082311461045b578063715018a61461048457806373cf25f81461048c57600080fd5b80632495a599116101a25780634ad84a1e116101715780634ad84a1e14610367578063509b6c3f1461040e5780635a18d022146104215780635c975abb1461043457600080fd5b80632495a599146102fe578063313ce5671461033d578063395093511461034c5780633f4ba83a1461035f57600080fd5b806318160ddd116101de57806318160ddd146102a657806319f8c0b6146102b857806323b872dd146102d857806323cb2390146102eb57600080fd5b806306fdde031461021057806307a100051461025b578063095ea7b3146102705780630e5c011e14610293575b600080fd5b60408051808201909152600d81527f506c616e746564204d616e676f0000000000000000000000000000000000000060208201525b6040516102529190612484565b60405180910390f35b61026e6102693660046124f2565b610630565b005b61028361027e3660046125cc565b61099f565b6040519015158152602001610252565b61026e6102a13660046125f8565b6109b9565b6002545b604051908152602001610252565b6102cb6102c63660046124f2565b610a20565b604051610252919061261c565b6102836102e6366004612674565b610c45565b61026e6102f93660046126b5565b610c69565b6103257f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610252565b60405160128152602001610252565b61028361035a3660046125cc565b610c7f565b61026e610cbe565b6103d96103753660046125f8565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394851681526008835283902083519182018452805482526001015493841691810191909152600160a01b90920467ffffffffffffffff169082015290565b60408051825181526020808401516001600160a01b0316908201529181015167ffffffffffffffff1690820152606001610252565b61032561041c3660046126ee565b610cd5565b6102aa61042f3660046125cc565b610d05565b60055461028390600160a01b900460ff1681565b6102cb6104563660046125f8565b610ee7565b6102aa6104693660046125f8565b6001600160a01b031660009081526020819052604090205490565b61026e610f4d565b61026e61049a366004612753565b610f61565b61026e6104ad3660046126b5565b611138565b61026e611264565b6005546001600160a01b0316610325565b60408051808201909152600681527f704d414e474f00000000000000000000000000000000000000000000000000006020820152610245565b6102836105123660046125cc565b611281565b6102836105253660046125cc565b61132b565b6007546102aa565b61026e6105403660046127bf565b611339565b61054d61163c565b60405161025291906127e4565b6102aa6105683660046126b5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61026e6105a13660046125f8565b61169e565b6106026105b43660046126b5565b604080518082018252600080825260209182018190526001600160a01b0394851681526009825282812093909416845291825291829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610252565b61026e61062b3660046127bf565b61172b565b60065460011461065b57604051630bc320f560e01b8152600260048201526024015b60405180910390fd5b6002600655600554600160a01b900460ff161561068e57604051630bc320f560e01b815260016004820152602401610652565b81600061069a60025490565b11156108b0576001600160a01b038116600090815260208181526040808320546007805483518186028101860190945280845291949390919083018282801561070c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106ee575b5050505050905060005b81518110156108ac57600082828151811061073357610733612831565b6020908102919091018101516001600160a01b03808216600090815260088452604090819020600101548151633fac13df60e21b8152915193955090911692839263feb04f7c9260048082019392918290030181865afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190612847565b42111561081a57806001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561080157600080fd5b505af1158015610815573d6000803e3d6000fd5b505050505b6001600160a01b03861615610899576001600160a01b038216600090815260086020908152604091829020548251808401909352808352919081016108618986858b611a2f565b90526001600160a01b038089166000908152600960209081526040808320938816835292815291902082518155910151600190910155505b5050806108a590612876565b9050610716565b5050505b60005b82518110156109945760008382815181106108d0576108d0612831565b6020908102919091018101516001600160a01b038088166000908152600984526040808220928416825291909352909120600101549091508015610981576001600160a01b0386811660008181526009602090815260408083209487168084529482528083206001019290925590518481527fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec26797910160405180910390a36109816001600160a01b0383168783611ab4565b50508061098d90612876565b90506108b3565b505060016006555050565b6000336109ad818585611b62565b60019150505b92915050565b610a1d816007805480602002602001604051908101604052809291908181526020018280548015610a1357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f5575b5050505050610630565b50565b6060815167ffffffffffffffff811115610a3c57610a3c6124dc565b604051908082528060200260200182016040528015610a8157816020015b6040805180820190915260008082526020820152815260200190600190039081610a5a5790505b5090506000610a8f60025490565b90506000610ab2856001600160a01b031660009081526020819052604090205490565b905060005b8451811015610c3c576000858281518110610ad457610ad4612831565b60200260200101519050600080851115610bee576001600160a01b038281166000908152600860209081526040808320815160608101835281548152600190910154948516818401819052600160a01b90950467ffffffffffffffff168183015281517f95a0b59600000000000000000000000000000000000000000000000000000000815291519094926395a0b59692600480820193918290030181865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190612847565b9050600087610bc46b204fce5e3e250261100000008461288f565b610bce91906128a6565b8351610bda91906128c8565b9050610be88b86838a611a2f565b93505050505b6040518060400160405280836001600160a01b0316815260200182815250868481518110610c1e57610c1e612831565b6020026020010181905250505080610c3590612876565b9050610ab7565b50505092915050565b600033610c53858285611cba565b610c5e858585611d4c565b506001949350505050565b610c71611d68565b610c7b8282611dc2565b5050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906109ad9082908690610cb99087906128c8565b611b62565b610cc6611d68565b6005805460ff60a01b19169055565b600060078281548110610cea57610cea612831565b6000918252602090912001546001600160a01b031692915050565b6001600160a01b038281166000908152600860209081526040808320815160608101835281548152600190910154948516928101839052600160a01b90940467ffffffffffffffff16908401529091903314610d7757604051630bc320f560e01b815260006004820152602401610652565b82600003610d895760009150506109b3565b6000610d9460025490565b905080600003610da9576000925050506109b3565b600081610dc26b204fce5e3e250261100000008761288f565b610dcc91906128a6565b905080600003610de257600093505050506109b3565b610df76001600160a01b038716333088611f80565b8083600001818151610e0991906128c8565b9052504267ffffffffffffffff166040848101919091528351815187815260208101919091529081018390526001600160a01b0387169033907f624c08998f6d8803dfc1a3d1977479c2f03b0707c7ef36ee123a57f691c721f29060600160405180910390a350506001600160a01b03808516600090815260086020908152604091829020845181559084015160019091018054929094015167ffffffffffffffff16600160a01b027fffffffff00000000000000000000000000000000000000000000000000000000909216921691909117179055508092915050565b60606109b3826007805480602002602001604051908101604052809291908181526020018280548015610f4357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f25575b5050505050610a20565b610f55611d68565b610f5f6000611fd1565b565b600554600160b01b900460ff1615808015610f8957506005546001600160a81b90910460ff16105b80610faa5750303b158015610faa5750600554600160a81b900460ff166001145b61101c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610652565b600580547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b1790558015611064576005805460ff60b01b1916600160b01b1790555b61106e6001600655565b61107733611fd1565b60005b848110156110e8576110d886868381811061109757611097612831565b90506020020160208101906110ac91906125f8565b8585848181106110be576110be612831565b90506020020160208101906110d391906125f8565b611dc2565b6110e181612876565b905061107a565b508015611131576005805460ff60b01b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b611140611d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806111ab57506001600160a01b038216600090815260086020526040902060010154600160a01b900467ffffffffffffffff1615155b156111cc57604051630bc320f560e01b815260076004820152602401610652565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610c7b9082906001600160a01b038516906370a0823190602401602060405180830381865afa15801561122f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112539190612847565b6001600160a01b0385169190611ab4565b61126c611d68565b6005805460ff60a01b1916600160a01b179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561131e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610652565b610c5e8286868403611b62565b6000336109ad818585611d4c565b60065460011461135f57604051630bc320f560e01b815260026004820152602401610652565b6002600655600554600160a01b900460ff161561139257604051630bc320f560e01b815260016004820152602401610652565b33600061139e60025490565b11156115b4576001600160a01b038116600090815260208181526040808320546007805483518186028101860190945280845291949390919083018282801561141057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113f2575b5050505050905060005b81518110156115b057600082828151811061143757611437612831565b6020908102919091018101516001600160a01b03808216600090815260088452604090819020600101548151633fac13df60e21b8152915193955090911692839263feb04f7c9260048082019392918290030181865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c39190612847565b42111561151e57806001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050505b6001600160a01b0386161561159d576001600160a01b038216600090815260086020908152604091829020548251808401909352808352919081016115658986858b611a2f565b90526001600160a01b038089166000908152600960209081526040808320938816835292815291902082518155910151600190910155505b5050806115a990612876565b905061141a565b5050505b6115be3384612030565b6040518381526001600160a01b0383169033907fa42859626dec7c7ff40e61619ba9b23b3dbc3afce03f24fb3ecaa3b186bd1f2c9060200160405180910390a36116326001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168385611ab4565b5050600160065550565b6060600780548060200260200160405190810160405280929190818152602001828054801561169457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611676575b5050505050905090565b6116a6611d68565b6001600160a01b0381166117225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610652565b610a1d81611fd1565b60065460011461175157604051630bc320f560e01b815260026004820152602401610652565b6002600655600554600160a01b900460ff161561178457604051630bc320f560e01b815260016004820152602401610652565b80600061179060025490565b11156119a6576001600160a01b038116600090815260208181526040808320546007805483518186028101860190945280845291949390919083018282801561180257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117e4575b5050505050905060005b81518110156119a257600082828151811061182957611829612831565b6020908102919091018101516001600160a01b03808216600090815260088452604090819020600101548151633fac13df60e21b8152915193955090911692839263feb04f7c9260048082019392918290030181865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190612847565b42111561191057806001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118f757600080fd5b505af115801561190b573d6000803e3d6000fd5b505050505b6001600160a01b0386161561198f576001600160a01b038216600090815260086020908152604091829020548251808401909352808352919081016119578986858b611a2f565b90526001600160a01b038089166000908152600960209081526040808320938816835292815291902082518155910151600190910155505b50508061199b90612876565b905061180c565b5050505b6119db6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086611f80565b6119e58284612199565b6040518381526001600160a01b0383169033907f87119756b8ade22de5e690fc509eaa489dbd9dd25d351e7769b39a2c55ef17329060200160405180910390a35050600160065550565b6001600160a01b0380851660009081526009602090815260408083209387168352928152828220835180850190945280548085526001909101549184018290529192916b204fce5e3e2502611000000090611a8a90876128db565b611a94908661288f565b611a9e91906128a6565b611aa891906128c8565b9150505b949350505050565b6040516001600160a01b038316602482015260448101829052611b5d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612258565b505050565b6001600160a01b038316611bdd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b038216611c595760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611d465781811015611d395760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610652565b611d468484848403611b62565b50505050565b604051630bc320f560e01b815260006004820152602401610652565b6005546001600160a01b03163314610f5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610652565b6001600160a01b038216600090815260086020526040902060010154600160a01b900467ffffffffffffffff1615611e1057604051630bc320f560e01b815260006004820152602401610652565b816001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c91906128ee565b6001600160a01b031614611ea657604051630bc320f560e01b815260076004820152602401610652565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851690811790915560408051606081018252600080825294861660208083019182524267ffffffffffffffff9081168486019081529588526008909152929095209051815593519390920180549151939094167fffffffff0000000000000000000000000000000000000000000000000000000090911617600160a01b9290911691909102179055565b6040516001600160a01b0380851660248301528316604482015260648101829052611d469085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611af9565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166120ac5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b0382166000908152602081905260409020548181101561213b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6001600160a01b0382166121ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610652565b806002600082825461220191906128c8565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60006122ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661233d9092919063ffffffff16565b805190915015611b5d57808060200190518101906122cb919061290b565b611b5d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610652565b6060611aac848460008585600080866001600160a01b03168587604051612364919061292d565b60006040518083038185875af1925050503d80600081146123a1576040519150601f19603f3d011682016040523d82523d6000602084013e6123a6565b606091505b50915091506123b7878383876123c2565b979650505050505050565b6060831561243157825160000361242a576001600160a01b0385163b61242a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610652565b5081611aac565b611aac83838151156124465781518083602001fd5b8060405162461bcd60e51b81526004016106529190612484565b60005b8381101561247b578181015183820152602001612463565b50506000910152565b60208152600082518060208401526124a3816040850160208701612460565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610a1d57600080fd5b80356124d7816124b7565b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561250557600080fd5b8235612510816124b7565b915060208381013567ffffffffffffffff8082111561252e57600080fd5b818601915086601f83011261254257600080fd5b813581811115612554576125546124dc565b8060051b604051601f19603f83011681018181108582111715612579576125796124dc565b60405291825284820192508381018501918983111561259757600080fd5b938501935b828510156125bc576125ad856124cc565b8452938501939285019261259c565b8096505050505050509250929050565b600080604083850312156125df57600080fd5b82356125ea816124b7565b946020939093013593505050565b60006020828403121561260a57600080fd5b8135612615816124b7565b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561266757815180516001600160a01b03168552860151868501529284019290850190600101612639565b5091979650505050505050565b60008060006060848603121561268957600080fd5b8335612694816124b7565b925060208401356126a4816124b7565b929592945050506040919091013590565b600080604083850312156126c857600080fd5b82356126d3816124b7565b915060208301356126e3816124b7565b809150509250929050565b60006020828403121561270057600080fd5b5035919050565b60008083601f84011261271957600080fd5b50813567ffffffffffffffff81111561273157600080fd5b6020830191508360208260051b850101111561274c57600080fd5b9250929050565b6000806000806040858703121561276957600080fd5b843567ffffffffffffffff8082111561278157600080fd5b61278d88838901612707565b909650945060208701359150808211156127a657600080fd5b506127b387828801612707565b95989497509550505050565b600080604083850312156127d257600080fd5b8235915060208301356126e3816124b7565b6020808252825182820181905260009190848201906040850190845b818110156128255783516001600160a01b031683529284019291840191600101612800565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561285957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161288857612888612860565b5060010190565b80820281158282048414176109b3576109b3612860565b6000826128c357634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156109b3576109b3612860565b818103818111156109b3576109b3612860565b60006020828403121561290057600080fd5b8151612615816124b7565b60006020828403121561291d57600080fd5b8151801515811461261557600080fd5b6000825161293f818460208701612460565b919091019291505056fea2646970667358221220bdd6a7f6080d58db8e6a7f82820a05feb7e44324fe491cd6e6957bd5999e870564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c80636026377a1161012a578063a457c2d7116100bd578063c2b18aa01161008c578063f2fde38b11610071578063f2fde38b14610593578063f305ce47146105a6578063f6678d0e1461061d57600080fd5b8063c2b18aa014610545578063dd62ed3e1461055a57600080fd5b8063a457c2d714610504578063a9059cbb14610517578063bf199e621461052a578063c102498b1461053257600080fd5b80638284511b116100f95780638284511b1461049f5780638456cb59146104b25780638da5cb5b146104ba57806395d89b41146104cb57600080fd5b80636026377a1461044857806370a082311461045b578063715018a61461048457806373cf25f81461048c57600080fd5b80632495a599116101a25780634ad84a1e116101715780634ad84a1e14610367578063509b6c3f1461040e5780635a18d022146104215780635c975abb1461043457600080fd5b80632495a599146102fe578063313ce5671461033d578063395093511461034c5780633f4ba83a1461035f57600080fd5b806318160ddd116101de57806318160ddd146102a657806319f8c0b6146102b857806323b872dd146102d857806323cb2390146102eb57600080fd5b806306fdde031461021057806307a100051461025b578063095ea7b3146102705780630e5c011e14610293575b600080fd5b60408051808201909152600d81527f506c616e746564204d616e676f0000000000000000000000000000000000000060208201525b6040516102529190612484565b60405180910390f35b61026e6102693660046124f2565b610630565b005b61028361027e3660046125cc565b61099f565b6040519015158152602001610252565b61026e6102a13660046125f8565b6109b9565b6002545b604051908152602001610252565b6102cb6102c63660046124f2565b610a20565b604051610252919061261c565b6102836102e6366004612674565b610c45565b61026e6102f93660046126b5565b610c69565b6103257f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610252565b60405160128152602001610252565b61028361035a3660046125cc565b610c7f565b61026e610cbe565b6103d96103753660046125f8565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394851681526008835283902083519182018452805482526001015493841691810191909152600160a01b90920467ffffffffffffffff169082015290565b60408051825181526020808401516001600160a01b0316908201529181015167ffffffffffffffff1690820152606001610252565b61032561041c3660046126ee565b610cd5565b6102aa61042f3660046125cc565b610d05565b60055461028390600160a01b900460ff1681565b6102cb6104563660046125f8565b610ee7565b6102aa6104693660046125f8565b6001600160a01b031660009081526020819052604090205490565b61026e610f4d565b61026e61049a366004612753565b610f61565b61026e6104ad3660046126b5565b611138565b61026e611264565b6005546001600160a01b0316610325565b60408051808201909152600681527f704d414e474f00000000000000000000000000000000000000000000000000006020820152610245565b6102836105123660046125cc565b611281565b6102836105253660046125cc565b61132b565b6007546102aa565b61026e6105403660046127bf565b611339565b61054d61163c565b60405161025291906127e4565b6102aa6105683660046126b5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61026e6105a13660046125f8565b61169e565b6106026105b43660046126b5565b604080518082018252600080825260209182018190526001600160a01b0394851681526009825282812093909416845291825291829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610252565b61026e61062b3660046127bf565b61172b565b60065460011461065b57604051630bc320f560e01b8152600260048201526024015b60405180910390fd5b6002600655600554600160a01b900460ff161561068e57604051630bc320f560e01b815260016004820152602401610652565b81600061069a60025490565b11156108b0576001600160a01b038116600090815260208181526040808320546007805483518186028101860190945280845291949390919083018282801561070c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106ee575b5050505050905060005b81518110156108ac57600082828151811061073357610733612831565b6020908102919091018101516001600160a01b03808216600090815260088452604090819020600101548151633fac13df60e21b8152915193955090911692839263feb04f7c9260048082019392918290030181865afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190612847565b42111561081a57806001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561080157600080fd5b505af1158015610815573d6000803e3d6000fd5b505050505b6001600160a01b03861615610899576001600160a01b038216600090815260086020908152604091829020548251808401909352808352919081016108618986858b611a2f565b90526001600160a01b038089166000908152600960209081526040808320938816835292815291902082518155910151600190910155505b5050806108a590612876565b9050610716565b5050505b60005b82518110156109945760008382815181106108d0576108d0612831565b6020908102919091018101516001600160a01b038088166000908152600984526040808220928416825291909352909120600101549091508015610981576001600160a01b0386811660008181526009602090815260408083209487168084529482528083206001019290925590518481527fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec26797910160405180910390a36109816001600160a01b0383168783611ab4565b50508061098d90612876565b90506108b3565b505060016006555050565b6000336109ad818585611b62565b60019150505b92915050565b610a1d816007805480602002602001604051908101604052809291908181526020018280548015610a1357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f5575b5050505050610630565b50565b6060815167ffffffffffffffff811115610a3c57610a3c6124dc565b604051908082528060200260200182016040528015610a8157816020015b6040805180820190915260008082526020820152815260200190600190039081610a5a5790505b5090506000610a8f60025490565b90506000610ab2856001600160a01b031660009081526020819052604090205490565b905060005b8451811015610c3c576000858281518110610ad457610ad4612831565b60200260200101519050600080851115610bee576001600160a01b038281166000908152600860209081526040808320815160608101835281548152600190910154948516818401819052600160a01b90950467ffffffffffffffff168183015281517f95a0b59600000000000000000000000000000000000000000000000000000000815291519094926395a0b59692600480820193918290030181865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190612847565b9050600087610bc46b204fce5e3e250261100000008461288f565b610bce91906128a6565b8351610bda91906128c8565b9050610be88b86838a611a2f565b93505050505b6040518060400160405280836001600160a01b0316815260200182815250868481518110610c1e57610c1e612831565b6020026020010181905250505080610c3590612876565b9050610ab7565b50505092915050565b600033610c53858285611cba565b610c5e858585611d4c565b506001949350505050565b610c71611d68565b610c7b8282611dc2565b5050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906109ad9082908690610cb99087906128c8565b611b62565b610cc6611d68565b6005805460ff60a01b19169055565b600060078281548110610cea57610cea612831565b6000918252602090912001546001600160a01b031692915050565b6001600160a01b038281166000908152600860209081526040808320815160608101835281548152600190910154948516928101839052600160a01b90940467ffffffffffffffff16908401529091903314610d7757604051630bc320f560e01b815260006004820152602401610652565b82600003610d895760009150506109b3565b6000610d9460025490565b905080600003610da9576000925050506109b3565b600081610dc26b204fce5e3e250261100000008761288f565b610dcc91906128a6565b905080600003610de257600093505050506109b3565b610df76001600160a01b038716333088611f80565b8083600001818151610e0991906128c8565b9052504267ffffffffffffffff166040848101919091528351815187815260208101919091529081018390526001600160a01b0387169033907f624c08998f6d8803dfc1a3d1977479c2f03b0707c7ef36ee123a57f691c721f29060600160405180910390a350506001600160a01b03808516600090815260086020908152604091829020845181559084015160019091018054929094015167ffffffffffffffff16600160a01b027fffffffff00000000000000000000000000000000000000000000000000000000909216921691909117179055508092915050565b60606109b3826007805480602002602001604051908101604052809291908181526020018280548015610f4357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f25575b5050505050610a20565b610f55611d68565b610f5f6000611fd1565b565b600554600160b01b900460ff1615808015610f8957506005546001600160a81b90910460ff16105b80610faa5750303b158015610faa5750600554600160a81b900460ff166001145b61101c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610652565b600580547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b1790558015611064576005805460ff60b01b1916600160b01b1790555b61106e6001600655565b61107733611fd1565b60005b848110156110e8576110d886868381811061109757611097612831565b90506020020160208101906110ac91906125f8565b8585848181106110be576110be612831565b90506020020160208101906110d391906125f8565b611dc2565b6110e181612876565b905061107a565b508015611131576005805460ff60b01b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b611140611d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806111ab57506001600160a01b038216600090815260086020526040902060010154600160a01b900467ffffffffffffffff1615155b156111cc57604051630bc320f560e01b815260076004820152602401610652565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610c7b9082906001600160a01b038516906370a0823190602401602060405180830381865afa15801561122f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112539190612847565b6001600160a01b0385169190611ab4565b61126c611d68565b6005805460ff60a01b1916600160a01b179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561131e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610652565b610c5e8286868403611b62565b6000336109ad818585611d4c565b60065460011461135f57604051630bc320f560e01b815260026004820152602401610652565b6002600655600554600160a01b900460ff161561139257604051630bc320f560e01b815260016004820152602401610652565b33600061139e60025490565b11156115b4576001600160a01b038116600090815260208181526040808320546007805483518186028101860190945280845291949390919083018282801561141057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113f2575b5050505050905060005b81518110156115b057600082828151811061143757611437612831565b6020908102919091018101516001600160a01b03808216600090815260088452604090819020600101548151633fac13df60e21b8152915193955090911692839263feb04f7c9260048082019392918290030181865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c39190612847565b42111561151e57806001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050505b6001600160a01b0386161561159d576001600160a01b038216600090815260086020908152604091829020548251808401909352808352919081016115658986858b611a2f565b90526001600160a01b038089166000908152600960209081526040808320938816835292815291902082518155910151600190910155505b5050806115a990612876565b905061141a565b5050505b6115be3384612030565b6040518381526001600160a01b0383169033907fa42859626dec7c7ff40e61619ba9b23b3dbc3afce03f24fb3ecaa3b186bd1f2c9060200160405180910390a36116326001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168385611ab4565b5050600160065550565b6060600780548060200260200160405190810160405280929190818152602001828054801561169457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611676575b5050505050905090565b6116a6611d68565b6001600160a01b0381166117225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610652565b610a1d81611fd1565b60065460011461175157604051630bc320f560e01b815260026004820152602401610652565b6002600655600554600160a01b900460ff161561178457604051630bc320f560e01b815260016004820152602401610652565b80600061179060025490565b11156119a6576001600160a01b038116600090815260208181526040808320546007805483518186028101860190945280845291949390919083018282801561180257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117e4575b5050505050905060005b81518110156119a257600082828151811061182957611829612831565b6020908102919091018101516001600160a01b03808216600090815260088452604090819020600101548151633fac13df60e21b8152915193955090911692839263feb04f7c9260048082019392918290030181865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190612847565b42111561191057806001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118f757600080fd5b505af115801561190b573d6000803e3d6000fd5b505050505b6001600160a01b0386161561198f576001600160a01b038216600090815260086020908152604091829020548251808401909352808352919081016119578986858b611a2f565b90526001600160a01b038089166000908152600960209081526040808320938816835292815291902082518155910151600190910155505b50508061199b90612876565b905061180c565b5050505b6119db6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086611f80565b6119e58284612199565b6040518381526001600160a01b0383169033907f87119756b8ade22de5e690fc509eaa489dbd9dd25d351e7769b39a2c55ef17329060200160405180910390a35050600160065550565b6001600160a01b0380851660009081526009602090815260408083209387168352928152828220835180850190945280548085526001909101549184018290529192916b204fce5e3e2502611000000090611a8a90876128db565b611a94908661288f565b611a9e91906128a6565b611aa891906128c8565b9150505b949350505050565b6040516001600160a01b038316602482015260448101829052611b5d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612258565b505050565b6001600160a01b038316611bdd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b038216611c595760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611d465781811015611d395760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610652565b611d468484848403611b62565b50505050565b604051630bc320f560e01b815260006004820152602401610652565b6005546001600160a01b03163314610f5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610652565b6001600160a01b038216600090815260086020526040902060010154600160a01b900467ffffffffffffffff1615611e1057604051630bc320f560e01b815260006004820152602401610652565b816001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c91906128ee565b6001600160a01b031614611ea657604051630bc320f560e01b815260076004820152602401610652565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851690811790915560408051606081018252600080825294861660208083019182524267ffffffffffffffff9081168486019081529588526008909152929095209051815593519390920180549151939094167fffffffff0000000000000000000000000000000000000000000000000000000090911617600160a01b9290911691909102179055565b6040516001600160a01b0380851660248301528316604482015260648101829052611d469085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611af9565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166120ac5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b0382166000908152602081905260409020548181101561213b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610652565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6001600160a01b0382166121ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610652565b806002600082825461220191906128c8565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60006122ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661233d9092919063ffffffff16565b805190915015611b5d57808060200190518101906122cb919061290b565b611b5d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610652565b6060611aac848460008585600080866001600160a01b03168587604051612364919061292d565b60006040518083038185875af1925050503d80600081146123a1576040519150601f19603f3d011682016040523d82523d6000602084013e6123a6565b606091505b50915091506123b7878383876123c2565b979650505050505050565b6060831561243157825160000361242a576001600160a01b0385163b61242a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610652565b5081611aac565b611aac83838151156124465781518083602001fd5b8060405162461bcd60e51b81526004016106529190612484565b60005b8381101561247b578181015183820152602001612463565b50506000910152565b60208152600082518060208401526124a3816040850160208701612460565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610a1d57600080fd5b80356124d7816124b7565b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561250557600080fd5b8235612510816124b7565b915060208381013567ffffffffffffffff8082111561252e57600080fd5b818601915086601f83011261254257600080fd5b813581811115612554576125546124dc565b8060051b604051601f19603f83011681018181108582111715612579576125796124dc565b60405291825284820192508381018501918983111561259757600080fd5b938501935b828510156125bc576125ad856124cc565b8452938501939285019261259c565b8096505050505050509250929050565b600080604083850312156125df57600080fd5b82356125ea816124b7565b946020939093013593505050565b60006020828403121561260a57600080fd5b8135612615816124b7565b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561266757815180516001600160a01b03168552860151868501529284019290850190600101612639565b5091979650505050505050565b60008060006060848603121561268957600080fd5b8335612694816124b7565b925060208401356126a4816124b7565b929592945050506040919091013590565b600080604083850312156126c857600080fd5b82356126d3816124b7565b915060208301356126e3816124b7565b809150509250929050565b60006020828403121561270057600080fd5b5035919050565b60008083601f84011261271957600080fd5b50813567ffffffffffffffff81111561273157600080fd5b6020830191508360208260051b850101111561274c57600080fd5b9250929050565b6000806000806040858703121561276957600080fd5b843567ffffffffffffffff8082111561278157600080fd5b61278d88838901612707565b909650945060208701359150808211156127a657600080fd5b506127b387828801612707565b95989497509550505050565b600080604083850312156127d257600080fd5b8235915060208301356126e3816124b7565b6020808252825182820181905260009190848201906040850190845b818110156128255783516001600160a01b031683529284019291840191600101612800565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561285957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161288857612888612860565b5060010190565b80820281158282048414176109b3576109b3612860565b6000826128c357634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156109b3576109b3612860565b818103818111156109b3576109b3612860565b60006020828403121561290057600080fd5b8151612615816124b7565b60006020828403121561291d57600080fd5b8151801515811461261557600080fd5b6000825161293f818460208701612460565b919091019291505056fea2646970667358221220bdd6a7f6080d58db8e6a7f82820a05feb7e44324fe491cd6e6957bd5999e870564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 297,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 303,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 305,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 307,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 309,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6652,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 119,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_initialized",
        "offset": 21,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 122,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_initializing",
        "offset": 22,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 6694,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_locked",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4457,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_rewardTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4462,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_globalRewardSnapshot",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(GlobalRewardSnapshot)6452_storage)"
      },
      {
        "astId": 4469,
        "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
        "label": "_userRewardSnapshot",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardSnapshot)6457_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardSnapshot)6457_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IStakedToken.UserRewardSnapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardSnapshot)6457_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(GlobalRewardSnapshot)6452_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakedToken.GlobalRewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(GlobalRewardSnapshot)6452_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardSnapshot)6457_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakedToken.UserRewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardSnapshot)6457_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GlobalRewardSnapshot)6452_storage": {
        "encoding": "inplace",
        "label": "struct IStakedToken.GlobalRewardSnapshot",
        "members": [
          {
            "astId": 6447,
            "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
            "label": "rewardPerToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6449,
            "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
            "label": "treasury",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6451,
            "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
            "label": "timestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserRewardSnapshot)6457_storage": {
        "encoding": "inplace",
        "label": "struct IStakedToken.UserRewardSnapshot",
        "members": [
          {
            "astId": 6454,
            "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
            "label": "rewardPerToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6456,
            "contract": "contracts/MangoStakedToken.sol:MangoStakedToken",
            "label": "harvestableReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
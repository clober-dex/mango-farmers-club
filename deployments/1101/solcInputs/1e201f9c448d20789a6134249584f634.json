{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/clober/CloberMarketFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface CloberMarketFactory {\n    /**\n     * @notice Emitted when a new volatile market is created.\n     * @param market The address of the new market.\n     * @param orderToken The address of the new market's order token.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param nonce The nonce for this market.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The scale factor of the price points.\n     * @param r The common ratio between price points.\n     */\n    event CreateVolatileMarket(\n        address indexed market,\n        address orderToken,\n        address quoteToken,\n        address baseToken,\n        uint256 quoteUnit,\n        uint256 nonce,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 r\n    );\n\n    /**\n     * @notice Emitted when a new stable market is created.\n     * @param market The address of the new market.\n     * @param orderToken The address of the new market's order token.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param nonce The nonce for this market.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The starting price point.\n     * @param d The common difference between price points.\n     */\n    event CreateStableMarket(\n        address indexed market,\n        address orderToken,\n        address quoteToken,\n        address baseToken,\n        uint256 quoteUnit,\n        uint256 nonce,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 d\n    );\n\n    /**\n     * @notice Emitted when the address of the owner has changed.\n     * @param previousOwner The address of the previous owner.\n     * @param newOwner The address of the new owner.\n     */\n    event ChangeOwner(address previousOwner, address newOwner);\n\n    /**\n     * @notice Emitted when the DAO Treasury address has changed.\n     * @param previousTreasury The address of the previous DAO Treasury.\n     * @param newTreasury The address of the new DAO Treasury.\n     */\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\n\n    /**\n     * @notice Emitted when the host address has changed.\n     * @param market The address of the market that had a change of hosts.\n     * @param previousHost The address of the previous host.\n     * @param newHost The address of a new host.\n     */\n    event ChangeHost(address indexed market, address previousHost, address newHost);\n\n    /**\n     * @notice Returns the address of the deployed GeometricPriceBook.\n     * @return The address of the GeometricPriceBook.\n     */\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\n\n    /**\n     * @notice Returns the address of the deployed GeometricPriceBook.\n     * @return The address of the GeometricPriceBook.\n     */\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\n\n    /**\n     * @notice Returns the address of the MarketDeployer.\n     * @return The address of the MarketDeployer.\n     */\n    function marketDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the priceBookDeployer.\n     * @return The address of the priceBookDeployer.\n     */\n    function priceBookDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the orderTokenDeployer.\n     * @return The address of the orderTokenDeployer.\n     */\n    function orderTokenDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the OrderCanceler.\n     * @return The address of the OrderCanceler.\n     */\n    function canceler() external view returns (address);\n\n    /**\n     * @notice Returns whether the specified token address has been registered as a quote token.\n     * @param token The address of the token to check.\n     * @return bool Whether the token is registered as a quote token.\n     */\n    function registeredQuoteTokens(address token) external view returns (bool);\n\n    /**\n     * @notice Returns the address of the factory owner\n     * @return The address of the factory owner\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @notice Returns the address of the factory owner candidate\n     * @return The address of the factory owner candidate\n     */\n    function futureOwner() external view returns (address);\n\n    /**\n     * @notice Returns the address of the DAO Treasury\n     * @return The address of the DAO Treasury\n     */\n    function daoTreasury() external view returns (address);\n\n    /**\n     * @notice Returns the current nonce\n     * @return The current nonce\n     */\n    function nonce() external view returns (uint256);\n\n    /**\n     * @notice Creates a new market with a VolatilePriceBook.\n     * @param host The address of the new market's host.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The scale factor of the price points.\n     * @param r The common ratio between price points.\n     * @return The address of the created market.\n     */\n    function createVolatileMarket(\n        address host,\n        address quoteToken,\n        address baseToken,\n        uint96 quoteUnit,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 r\n    ) external returns (address);\n\n    /**\n     * @notice Creates a new market with a StablePriceBook\n     * @param host The address of the new market's host\n     * @param quoteToken The address of the new market's quote token\n     * @param baseToken The address of the new market's base token\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The starting price point.\n     * @param d The common difference between price points.\n     * @return The address of the created market.\n     */\n    function createStableMarket(\n        address host,\n        address quoteToken,\n        address baseToken,\n        uint96 quoteUnit,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 d\n    ) external returns (address);\n\n    /**\n     * @notice Change the DAO Treasury address.\n     * @dev Only the factory owner can call this function.\n     * @param treasury The new address of the DAO Treasury.\n     */\n    function changeDaoTreasury(address treasury) external;\n\n    /**\n     * @notice Sets the new owner address for this contract.\n     * @dev Only the factory owner can call this function.\n     * @param newOwner The new owner address for this contract.\n     */\n    function prepareChangeOwner(address newOwner) external;\n\n    /**\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\n     * @dev Only the future owner can call this function.\n     */\n    function executeChangeOwner() external;\n\n    /**\n     * @notice Returns the host address of the given market.\n     * @param market The address of the target market.\n     * @return The host address of the market.\n     */\n    function getMarketHost(address market) external view returns (address);\n\n    /**\n     * @notice Prepares to set a new host address for the given market address.\n     * @dev Only the market host can call this function.\n     * @param market The market address for which the host will be changed.\n     * @param newHost The new host address for the given market.\n     */\n    function prepareHandOverHost(address market, address newHost) external;\n\n    /**\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\n     * @dev Only the future market host can call this function.\n     * @param market The market address for which the host will be changed.\n     */\n    function executeHandOverHost(address market) external;\n\n    enum MarketType {\n        NONE,\n        VOLATILE,\n        STABLE\n    }\n\n    /**\n     * @notice MarketInfo struct that contains information about a market.\n     * @param host The address of the market host.\n     * @param marketType The market type, either VOLATILE or STABLE.\n     * @param a The starting price point.\n     * @param factor The either the common ratio or common difference between price points.\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\n     */\n    struct MarketInfo {\n        address host;\n        MarketType marketType;\n        uint128 a;\n        uint128 factor;\n        address futureHost;\n    }\n\n    /**\n     * @notice Returns key information about the market.\n     * @param market The address of the market.\n     * @return marketInfo The MarketInfo structure of the given market.\n     */\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\n\n    /**\n     * @notice Allows the specified token to be used as the quote token.\n     * @dev Only the factory owner can call this function.\n     * @param token The address of the token to register.\n     */\n    function registerQuoteToken(address token) external;\n\n    /**\n     * @notice Revokes the token's right to be used as a quote token.\n     * @dev Only the factory owner can call this function.\n     * @param token The address of the token to unregister.\n     */\n    function unregisterQuoteToken(address token) external;\n\n    /**\n     * @notice Returns the order token name.\n     * @param quoteToken The address of the market's quote token.\n     * @param baseToken The address of the market's base token.\n     * @param marketNonce The market nonce.\n     * @return The order token name.\n     */\n    function formatOrderTokenName(\n        address quoteToken,\n        address baseToken,\n        uint256 marketNonce\n    ) external view returns (string memory);\n\n    /**\n     * @notice Returns the order token symbol.\n     * @param quoteToken The address of a new market's quote token.\n     * @param baseToken The address of a new market's base token.\n     * @param marketNonce The market nonce.\n     * @return The order token symbol.\n     */\n    function formatOrderTokenSymbol(\n        address quoteToken,\n        address baseToken,\n        uint256 marketNonce\n    ) external view returns (string memory);\n}\n"
    },
    "contracts/clober/CloberMarketSwapCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface CloberMarketSwapCallbackReceiver {\n    /**\n     * @notice Contracts placing orders on the OrderBook must implement this method.\n     * In this method, the contract has to send the required token, or the transaction will revert.\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\n     * @param inputToken The address of the token the user has to send.\n     * @param outputToken The address of the token the user has received.\n     * @param inputAmount The amount of tokens the user has to send.\n     * @param outputAmount The amount of tokens the user has received.\n     * @param data The user's custom callback data.\n     */\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        bytes calldata data\n    ) external payable;\n}\n"
    },
    "contracts/clober/CloberOrderBook.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"./CloberOrderKey.sol\";\n\ninterface CloberOrderBook {\n    /**\n     * @notice Emitted when an order is created.\n     * @param sender The address who sent the tokens to make the order.\n     * @param user The address with the rights to claim the proceeds of the order.\n     * @param rawAmount The ordered raw amount.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param options LSB: 0 - Ask, 1 - Bid.\n     */\n    event MakeOrder(\n        address indexed sender,\n        address indexed user,\n        uint64 rawAmount,\n        uint32 claimBounty,\n        uint256 orderIndex,\n        uint16 priceIndex,\n        uint8 options\n    );\n\n    /**\n     * @notice Emitted when an order takes from the order book.\n     * @param sender The address who sent the tokens to take the order.\n     * @param user The recipient address of the traded token.\n     * @param priceIndex The price book index.\n     * @param rawAmount The ordered raw amount.\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\n     */\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\n\n    /**\n     * @notice Emitted when an order is canceled.\n     * @param user The owner of the order.\n     * @param rawAmount The raw amount remaining that was canceled.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\n     */\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\n\n    /**\n     * @notice Emitted when the proceeds of an order is claimed.\n     * @param claimer The address that initiated the claim.\n     * @param user The owner of the order.\n     * @param rawAmount The ordered raw amount.\n     * @param bountyAmount The size of the claim bounty.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\n     */\n    event ClaimOrder(\n        address indexed claimer,\n        address indexed user,\n        uint64 rawAmount,\n        uint256 bountyAmount,\n        uint256 orderIndex,\n        uint16 priceIndex,\n        bool isBase\n    );\n\n    /**\n     * @notice Emitted when a flash-loan is taken.\n     * @param caller The caller address of the flash-loan.\n     * @param borrower The address of the flash loan token receiver.\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\n     * @param baseAmount The amount of base tokens the user has borrowed.\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\n     */\n    event Flash(\n        address indexed caller,\n        address indexed borrower,\n        uint256 quoteAmount,\n        uint256 baseAmount,\n        uint256 earnedQuote,\n        uint256 earnedBase\n    );\n\n    /**\n     * @notice A struct that represents an order.\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\n     * @param owner The address of the order owner.\n     */\n    struct Order {\n        uint64 amount;\n        uint32 claimBounty;\n        address owner;\n    }\n\n    /**\n     * @notice A struct that represents a block trade log.\n     * @param blockTime The timestamp of the block.\n     * @param askVolume The volume taken on the ask side.\n     * @param bidVolume The volume taken on the bid side.\n     * @param open The price book index on the open.\n     * @param high The highest price book index in the block.\n     * @param low The lowest price book index in the block.\n     * @param close The price book index on the close.\n     */\n    struct BlockTradeLog {\n        uint64 blockTime;\n        uint64 askVolume;\n        uint64 bidVolume;\n        uint16 open;\n        uint16 high;\n        uint16 low;\n        uint16 close;\n    }\n\n    /**\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\n     * @dev `msg.value` will be used as the claimBounty.\n     * @param user The taker/maker address.\n     * @param priceIndex The price book index.\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\n     * @param baseAmount The base token amount to trade, utilized by asks.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\n     * @param data Custom callback data\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\n     */\n    function limitOrder(\n        address user,\n        uint16 priceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Returns the expected input amount and output amount.\n     * @param limitPriceIndex The price index to take until.\n     * @param rawAmount The raw amount to trade.\n     * Bid & expendInput => Used as input amount.\n     * Bid & !expendInput => Not used.\n     * Ask & expendInput => Not used.\n     * Ask & !expendInput => Used as output amount.\n     * @param baseAmount The base token amount to trade.\n     * Bid & expendInput => Not used.\n     * Bid & !expendInput => Used as output amount.\n     * Ask & expendInput => Used as input amount.\n     * Ask & !expendInput => Not used.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\n     */\n    function getExpectedAmount(\n        uint16 limitPriceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options\n    ) external view returns (uint256, uint256);\n\n    /**\n     * @notice Take opens orders until certain conditions are met.\n     * @param user The taker address.\n     * @param limitPriceIndex The price index to take until.\n     * @param rawAmount The raw amount to trade.\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\n     * @param baseAmount The base token amount to trade.\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\n     * @param data Custom callback data.\n     */\n    function marketOrder(\n        address user,\n        uint16 limitPriceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @notice Cancel orders.\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\n     * @param receiver The address to receive canceled tokens.\n     * @param orderKeys The order keys of the orders to cancel.\n     */\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\n\n    /**\n     * @notice Claim the proceeds of orders.\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\n     * @param claimer The address to receive the claim bounties.\n     * @param orderKeys The order keys of the orders to claim.\n     */\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\n\n    /**\n     * @notice Get the claimable proceeds of an order.\n     * @param orderKey The order key of the order.\n     * @return claimableRawAmount The claimable raw amount.\n     * @return claimableAmount The claimable amount after fees.\n     * @return feeAmount The maker fee to be paid on claim.\n     * @return rebateAmount The rebate to be received on claim.\n     */\n    function getClaimable(\n        OrderKey calldata orderKey\n    )\n        external\n        view\n        returns (uint64 claimableRawAmount, uint256 claimableAmount, uint256 feeAmount, uint256 rebateAmount);\n\n    /**\n     * @notice Flash loan the tokens in the OrderBook.\n     * @param borrower The address to receive the loan.\n     * @param quoteAmount The quote token amount to borrow.\n     * @param baseAmount The base token amount to borrow.\n     * @param data The user's custom callback data.\n     */\n    function flash(address borrower, uint256 quoteAmount, uint256 baseAmount, bytes calldata data) external;\n\n    /**\n     * @notice Returns the quote unit amount.\n     * @return The amount that one raw amount represent in quote tokens.\n     */\n    function quoteUnit() external view returns (uint256);\n\n    /**\n     * @notice Returns the maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @return The maker fee. 100 = 1bp.\n     */\n    function makerFee() external view returns (int24);\n\n    /**\n     * @notice Returns the take fee\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @return The taker fee. 100 = 1bps.\n     */\n    function takerFee() external view returns (uint24);\n\n    /**\n     * @notice Returns the address of the order NFT contract.\n     * @return The address of the order NFT contract.\n     */\n    function orderToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the quote token.\n     * @return The address of the quote token.\n     */\n    function quoteToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the base token.\n     * @return The address of the base token.\n     */\n    function baseToken() external view returns (address);\n\n    /**\n     * @notice Returns the current total open amount at the given price.\n     * @param isBid The flag to choose which side to check the depth for.\n     * @param priceIndex The price book index.\n     * @return The total open amount.\n     */\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\n\n    /**\n     * @notice Returns the fee balance that has not been collected yet.\n     * @return quote The current fee balance for the quote token.\n     * @return base The current fee balance for the base token.\n     */\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\n\n    /**\n     * @notice Returns the amount of tokens that can be collected by the host.\n     * @param token The address of the token to be collected.\n     * @return The amount of tokens that can be collected by the host.\n     */\n    function uncollectedHostFees(address token) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\n     * @param token The address of the token to be collected.\n     * @return The amount of tokens that can be collected by the dao treasury.\n     */\n    function uncollectedProtocolFees(address token) external view returns (uint256);\n\n    /**\n     * @notice Returns whether the order book is empty or not.\n     * @param isBid The flag to choose which side to check the emptiness of.\n     * @return Whether the order book is empty or not on that side.\n     */\n    function isEmpty(bool isBid) external view returns (bool);\n\n    /**\n     * @notice Returns the order information.\n     * @param orderKey The order key of the order.\n     * @return The order struct of the given order key.\n     */\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\n\n    /**\n     * @notice Returns the lowest ask price index or the highest bid price index.\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\n     * @return The current price index. If the order book is empty, it will revert.\n     */\n    function bestPriceIndex(bool isBid) external view returns (uint16);\n\n    /**\n     * @notice Returns the current block trade log index.\n     * @return The current block trade log index.\n     */\n    function blockTradeLogIndex() external view returns (uint16);\n\n    /**\n     * @notice Returns the block trade log for a certain index.\n     * @param index The block trade log index used to query the block trade log.\n     * @return The queried block trade log.\n     */\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\n\n    /**\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\n     * @param rawAmount The raw amount to be converted.\n     * @param priceIndex The index of the price to be used for the conversion.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted base amount.\n     */\n    function rawToBase(uint64 rawAmount, uint16 priceIndex, bool roundingUp) external view returns (uint256);\n\n    /**\n     * @notice Converts a raw amount to its corresponding quote amount.\n     * @param rawAmount The raw amount to be converted.\n     * @return The converted quote amount.\n     */\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\n\n    /**\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\n     * @param baseAmount The base amount to be converted.\n     * @param priceIndex The index of the price to be used for the conversion.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted raw amount.\n     */\n    function baseToRaw(uint256 baseAmount, uint16 priceIndex, bool roundingUp) external view returns (uint64);\n\n    /**\n     * @notice Converts a quote amount to its corresponding raw amount.\n     * @param quoteAmount The quote amount to be converted.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted raw amount.\n     */\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\n\n    /**\n     * @notice Collects fees for either the protocol or host.\n     * @param token The token address to collect. It should be the quote token or the base token.\n     * @param destination The destination address to transfer fees.\n     * It should be the dao treasury address or the host address.\n     */\n    function collectFees(address token, address destination) external;\n\n    /**\n     * @notice Change the owner of the order.\n     * @dev Only the OrderToken contract can call this function.\n     * @param orderKey The order key of the order.\n     * @param newOwner The new owner address.\n     */\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\n\n    /**\n     * @notice Converts the price index into the actual price.\n     * @param priceIndex The price book index.\n     * @return price The actual price.\n     */\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\n\n    /**\n     * @notice Returns the price book index closest to the provided price.\n     * @param price Provided price.\n     * @param roundingUp Determines whether to round up or down.\n     * @return index The price book index.\n     * @return correctedPrice The actual price for the price book index.\n     */\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\n}\n"
    },
    "contracts/clober/CloberOrderKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\n/**\n * @notice A struct that represents a unique key for an order.\n * @param isBid The flag indicating whether it's a bid order or an ask order.\n * @param priceIndex The price book index.\n * @param orderIndex The order index.\n */\nstruct OrderKey {\n    bool isBid;\n    uint16 priceIndex;\n    uint256 orderIndex;\n}\n"
    },
    "contracts/clober/CloberOrderNFT.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport \"./CloberOrderKey.sol\";\n\ninterface CloberOrderNFT is IERC721, IERC721Metadata {\n    /**\n     * @notice Returns the base URI for the metadata of this NFT collection.\n     * @return The base URI for the metadata of this NFT collection.\n     */\n    function baseURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the address of the market contract that manages this token.\n     * @return The address of the market contract that manages this token.\n     */\n    function market() external view returns (address);\n\n    /**\n     * @notice Returns the address of contract owner.\n     * @return The address of the contract owner.\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @notice Called when a new token is minted.\n     * @param to The receiver address of the minted token.\n     * @param tokenId The id of the token minted.\n     */\n    function onMint(address to, uint256 tokenId) external;\n\n    /**\n     * @notice Called when a token is burned.\n     * @param tokenId The id of the token burned.\n     */\n    function onBurn(uint256 tokenId) external;\n\n    /**\n     * @notice Changes the base URI for the metadata of this NFT collection.\n     * @param newBaseURI The new base URI for the metadata of this NFT collection.\n     */\n    function changeBaseURI(string memory newBaseURI) external;\n\n    /**\n     * @notice Decodes a token id into an order key.\n     * @param id The id to decode.\n     * @return The order key corresponding to the given id.\n     */\n    function decodeId(uint256 id) external pure returns (OrderKey memory);\n\n    /**\n     * @notice Encodes an order key to a token id.\n     * @param orderKey The order key to encode.\n     * @return The id corresponding to the given order key.\n     */\n    function encodeId(OrderKey memory orderKey) external pure returns (uint256);\n\n    /**\n     * @notice Cancels orders with token ids.\n     * @dev Only the OrderCanceler can call this function.\n     * @param from The address of the owner of the tokens.\n     * @param tokenIds The ids of the tokens to cancel.\n     * @param receiver The address to send the underlying assets to.\n     */\n    function cancel(address from, uint256[] calldata tokenIds, address receiver) external;\n}\n"
    },
    "contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    error MangoError(uint256 errorCode);\n\n    uint256 public constant ACCESS = 0;\n    uint256 public constant PAUSED = 1;\n    uint256 public constant REENTRANCY = 2;\n    uint256 public constant INSUFFICIENT_BALANCE = 3;\n    uint256 public constant EXCEEDED_BALANCE = 4;\n    uint256 public constant SLIPPAGE = 5;\n    uint256 public constant AMOUNT_TOO_SMALL = 6;\n    uint256 public constant INVALID_ADDRESS = 7;\n    uint256 public constant INVALID_TIME = 8;\n    uint256 public constant INVALID_FEE = 9;\n    uint256 public constant INVALID_BONUS = 10;\n}\n"
    },
    "contracts/interfaces/IBondPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBondPool {\n    event PurchaseBond(\n        address indexed payer,\n        address indexed to,\n        uint256 indexed orderId,\n        uint256 spentAmount,\n        uint8 bonus,\n        uint256 bondedAmount\n    );\n\n    struct Bond {\n        uint64 spentRawAmount;\n        uint64 purchasedRawAmount;\n        uint64 claimedRawAmount;\n        uint64 canceledRawAmount;\n        address owner;\n        uint8 bonus;\n        bool isValid; // Only true when the order is opened\n    }\n\n    struct BondInfo {\n        uint256 orderId;\n        address owner;\n        uint8 bonus;\n        bool isValid;\n        uint256 spentAmount;\n        uint256 bondedAmount;\n        uint256 claimedAmount;\n        uint256 canceledAmount; // fee excluded\n    }\n\n    struct BondOwner {\n        address owner;\n        uint256 orderId;\n    }\n\n    function burnAddress() external view returns (address);\n\n    function underlyingToken() external view returns (address);\n\n    function quoteToken() external view returns (address);\n\n    function cancelFee() external view returns (uint256);\n\n    function market() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function minBonus() external view returns (uint8);\n\n    function maxBonus() external view returns (uint8);\n\n    function releaseRate() external view returns (uint256);\n\n    function maxReleaseAmount() external view returns (uint256);\n\n    function initialBondPriceIndex() external view returns (uint16);\n\n    function lastReleasedAt() external view returns (uint64);\n\n    function sampleSize() external view returns (uint16);\n\n    function lastRecordedReleasedAmount() external view returns (uint256);\n\n    function soldAmount() external view returns (uint256);\n\n    function ownerOf(uint256 orderId) external view returns (address);\n\n    function ownersOf(uint256[] calldata orderIds) external view returns (BondOwner[] memory);\n\n    function claimable(uint256 orderId) external view returns (uint256);\n\n    function unaccountedClaimedAmount(uint256 orderId) external view returns (uint256);\n\n    function releasedAmount() external view returns (uint256);\n\n    function availableAmount() external view returns (uint256);\n\n    function bondInfo(uint256 orderId) external view returns (BondInfo memory);\n\n    function bondInfos(uint256[] calldata orderIds) external view returns (BondInfo[] memory);\n\n    function getBasisPriceIndex() external view returns (uint16 priceIndex);\n\n    function getBasisPrice() external view returns (uint256 price);\n\n    function expectedBondAmount(uint256 spentAmount, uint8 bonus) external view returns (uint256);\n\n    function purchaseBond(\n        uint256 spentAmount,\n        uint8 bonus,\n        address to,\n        uint16 limitPriceIndex\n    ) external returns (uint256 orderId);\n\n    function claim(uint256[] calldata orderIds) external;\n\n    function breakBonds(uint256[] calldata orderIds) external;\n\n    function withdrawLostERC20(address token, address to) external;\n\n    function changeAvailableBonusRange(uint8 min, uint8 max) external;\n\n    function changePriceSampleSize(uint16 sampleSize) external;\n\n    function withdrawExceededUnderlyingToken(address receiver) external;\n}\n"
    },
    "contracts/interfaces/ICloberMarketHost.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ITokenReceiver.sol\";\n\ninterface ICloberMarketHost {\n    event SetTokenReceiver(address indexed token, address indexed receiver);\n\n    function tokenReceiver(address token) external view returns (address);\n\n    function distributeTokens(address[] calldata tokenList) external;\n\n    function setTokenReceiver(ITokenReceiver receiver) external;\n\n    function withdrawLostERC20(address token, address to) external;\n\n    function receiveHost(address market) external;\n}\n"
    },
    "contracts/interfaces/ITokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITokenReceiver {\n    /**\n     * @notice Emitted when tokens are received.\n     * @param sender The address of the sender.\n     * @param amount The amount of tokens received.\n     */\n    event Receive(address indexed sender, uint256 amount);\n\n    /**\n     * @notice Returns the address of the receivable token.\n     * @return The address of the receivable token.\n     */\n    function receivingToken() external view returns (address);\n\n    /**\n     * @notice Allows the contract to receive tokens.\n     * @param amount The amount of tokens to be received.\n     */\n    function receiveToken(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ITokenReceiver.sol\";\n\ninterface ITreasury is ITokenReceiver {\n    event Distribute(uint256 amount, uint256 elapsed);\n\n    function stakedToken() external view returns (address);\n\n    function rewardToken() external view returns (address);\n\n    function lastDistributedAt() external view returns (uint256);\n\n    // precision 18\n    // tokens per second\n    function rewardRate() external view returns (uint256);\n\n    function getDistributableAmount() external view returns (uint256);\n\n    function distribute() external;\n\n    function withdrawLostERC20(address token, address to) external;\n}\n"
    },
    "contracts/MangoBondPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./clober/CloberOrderBook.sol\";\nimport \"./clober/CloberOrderKey.sol\";\nimport \"./clober/CloberOrderNFT.sol\";\nimport \"./interfaces/IBondPool.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./Errors.sol\";\nimport \"./utils/ReentrancyGuard.sol\";\nimport \"./clober/CloberMarketSwapCallbackReceiver.sol\";\nimport \"./utils/Pausable.sol\";\n\ncontract MangoBondPool is\n    IBondPool,\n    Initializable,\n    Ownable,\n    Pausable,\n    ReentrancyGuard,\n    CloberMarketSwapCallbackReceiver\n{\n    using SafeERC20 for IERC20;\n    uint256 private constant _FEE_PRECISION = 10 ** 6;\n\n    ITreasury private immutable _treasury;\n    address public immutable override burnAddress;\n    address public immutable override underlyingToken;\n    address public immutable override quoteToken;\n    uint256 public immutable override cancelFee;\n    uint256 public immutable override releaseRate;\n    uint256 public immutable override maxReleaseAmount;\n    uint16 public immutable override initialBondPriceIndex;\n    CloberOrderBook private immutable _market;\n    CloberOrderNFT private immutable _orderNFT;\n\n    uint8 public override minBonus;\n    uint8 public override maxBonus;\n    uint64 public override lastReleasedAt;\n    uint16 public override sampleSize;\n    uint256 public override lastRecordedReleasedAmount;\n    uint256 public override soldAmount;\n\n    mapping(uint256 => Bond) private _bonds;\n\n    constructor(\n        address treasury_,\n        address burnAddress_,\n        address underlyingToken_,\n        uint256 cancelFee_,\n        address market_,\n        uint256 releaseRate_,\n        uint256 maxReleaseAmount_,\n        uint16 initialBondPriceIndex_\n    ) {\n        _treasury = ITreasury(treasury_);\n        burnAddress = burnAddress_;\n        _market = CloberOrderBook(market_);\n        _orderNFT = CloberOrderNFT(_market.orderToken());\n        if (_market.baseToken() != underlyingToken_) {\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\n        }\n        // change needed if market policy change to allow non-zero makerFee\n        if (_market.makerFee() != 0) {\n            revert Errors.MangoError(Errors.INVALID_FEE);\n        }\n        underlyingToken = underlyingToken_;\n        cancelFee = cancelFee_;\n        quoteToken = _market.quoteToken();\n        releaseRate = releaseRate_;\n        maxReleaseAmount = maxReleaseAmount_;\n        initialBondPriceIndex = initialBondPriceIndex_;\n    }\n\n    function initialize(uint8 minBonus_, uint8 maxBonus_, uint64 startAt_, uint16 sampleSize_) external initializer {\n        _initReentrancyGuard();\n        _transferOwnership(msg.sender);\n        _changeAvailableBonusRange(minBonus_, maxBonus_);\n        lastReleasedAt = startAt_;\n        sampleSize = sampleSize_;\n        setApprovals();\n    }\n\n    modifier checkBonusRange(uint8 bonus) {\n        if (bonus > maxBonus || bonus < minBonus) {\n            revert Errors.MangoError(Errors.INVALID_BONUS);\n        }\n        _;\n    }\n\n    function setApprovals() public {\n        IERC20(quoteToken).safeApprove(address(_treasury), 0);\n        IERC20(quoteToken).safeApprove(address(_treasury), type(uint256).max);\n    }\n\n    function market() external view returns (address) {\n        return address(_market);\n    }\n\n    function treasury() external view returns (address) {\n        return address(_treasury);\n    }\n\n    function ownerOf(uint256 orderId) external view returns (address) {\n        return _bonds[orderId].owner;\n    }\n\n    function ownersOf(uint256[] calldata orderIds) external view returns (BondOwner[] memory owners) {\n        owners = new BondOwner[](orderIds.length);\n        for (uint256 i = 0; i < orderIds.length; ++i) {\n            owners[i] = BondOwner({owner: _bonds[orderIds[i]].owner, orderId: orderIds[i]});\n        }\n        return owners;\n    }\n\n    function claimable(uint256 orderId) external view returns (uint256 claimableAmount) {\n        OrderKey memory orderKey = _decodeOrderId(orderId);\n        Bond memory bond = _bonds[orderId];\n        if (!bond.isValid) {\n            return 0;\n        }\n        (, claimableAmount, , ) = _market.getClaimable(orderKey);\n        claimableAmount += _unaccountedClaimedAmount(bond, orderKey);\n    }\n\n    function unaccountedClaimedAmount(uint256 orderId) external view returns (uint256) {\n        return _unaccountedClaimedAmount(_bonds[orderId], _decodeOrderId(orderId));\n    }\n\n    function _unaccountedClaimedAmount(\n        Bond memory bond,\n        OrderKey memory orderKey\n    ) internal view returns (uint256 amount) {\n        uint64 remoteOrderRawAmount = _market.getOrder(orderKey).amount;\n        uint64 unaccountedClaimedRawAmount = bond.purchasedRawAmount - remoteOrderRawAmount - bond.claimedRawAmount;\n        if (unaccountedClaimedRawAmount == 0) {\n            return 0;\n        }\n        amount = _market.rawToQuote(unaccountedClaimedRawAmount);\n    }\n\n    function releasedAmount() public view returns (uint256 newReleasedAmount) {\n        // @dev Assume that `lastReleasedAt` is not 0. We initialize this value in `initialize()`.\n        uint256 timeDiff = block.timestamp - lastReleasedAt;\n        newReleasedAmount = lastRecordedReleasedAmount + releaseRate * timeDiff;\n        if (newReleasedAmount > maxReleaseAmount) {\n            newReleasedAmount = maxReleaseAmount;\n        }\n    }\n\n    function availableAmount() public view returns (uint256) {\n        return releasedAmount() - soldAmount;\n    }\n\n    function _release() internal {\n        if (block.timestamp > lastReleasedAt) {\n            lastRecordedReleasedAmount = releasedAmount();\n            lastReleasedAt = uint64(block.timestamp);\n        }\n    }\n\n    function bondInfo(uint256 orderId) public view returns (BondInfo memory) {\n        Bond memory bond = _bonds[orderId];\n        uint16 priceIndex = _decodeOrderId(orderId).priceIndex;\n        return\n            BondInfo({\n                orderId: orderId,\n                owner: bond.owner,\n                bonus: bond.bonus,\n                isValid: bond.isValid,\n                spentAmount: _market.rawToQuote(bond.spentRawAmount),\n                bondedAmount: _market.rawToBase(bond.purchasedRawAmount, priceIndex, false),\n                claimedAmount: _market.rawToQuote(bond.claimedRawAmount),\n                canceledAmount: _market.rawToBase(bond.canceledRawAmount, priceIndex, false)\n            });\n    }\n\n    function bondInfos(uint256[] calldata orderIds) external view returns (BondInfo[] memory infos) {\n        infos = new BondInfo[](orderIds.length);\n        for (uint256 i = 0; i < orderIds.length; ++i) {\n            infos[i] = bondInfo(orderIds[i]);\n        }\n        return infos;\n    }\n\n    function getBasisPriceIndex() public view returns (uint16 priceIndex) {\n        uint16 index = _market.blockTradeLogIndex();\n        uint16 size = sampleSize;\n        priceIndex = 0;\n        uint16 gap = 2;\n        for (uint256 i = 0; i < size; ++i) {\n            CloberOrderBook.BlockTradeLog memory log = _market.blockTradeLogs(index);\n            if (i == 0 && log.blockTime == block.timestamp) {\n                // skip log of the same block\n                unchecked {\n                    index -= 1;\n                }\n                log = _market.blockTradeLogs(index);\n            }\n            // check empty block log\n            if (log.blockTime == 0) {\n                if (priceIndex < initialBondPriceIndex) {\n                    return initialBondPriceIndex;\n                }\n                break;\n            }\n            if (log.high > priceIndex) {\n                priceIndex = log.high;\n            }\n            unchecked {\n                index -= gap;\n                gap *= 2;\n            }\n        }\n        if (priceIndex == 0) {\n            return initialBondPriceIndex;\n        }\n    }\n\n    function getBasisPrice() external view returns (uint256 price) {\n        return _market.indexToPrice(getBasisPriceIndex());\n    }\n\n    function expectedBondAmount(\n        uint256 spentAmount,\n        uint8 bonus\n    ) external view checkBonusRange(bonus) returns (uint256 amount) {\n        uint64 spentRawAmount = _market.quoteToRaw(spentAmount, false);\n        (uint16 priceIndex, uint256 orderAmount) = _calculateOrder(spentRawAmount, bonus);\n        amount = _market.rawToBase(_market.baseToRaw(orderAmount, priceIndex, false), priceIndex, false);\n    }\n\n    function _calculateOrder(\n        uint64 spentRawAmount,\n        uint8 bonus\n    ) internal view returns (uint16 priceIndex, uint256 amount) {\n        uint16 basisPriceIndex = getBasisPriceIndex();\n        uint256 underlyingAmount = _market.rawToBase(spentRawAmount, basisPriceIndex, false);\n        priceIndex = basisPriceIndex + bonus;\n        uint64 orderRawAmount = _market.baseToRaw(underlyingAmount, priceIndex, false);\n        amount = _market.rawToBase(orderRawAmount, basisPriceIndex, false);\n    }\n\n    function purchaseBond(\n        uint256 spentAmount,\n        uint8 bonus,\n        address to,\n        uint16 limitPriceIndex\n    ) external nonReentrant whenNotPaused checkBonusRange(bonus) returns (uint256 orderId) {\n        _release();\n        uint64 spentRawAmount = _market.quoteToRaw(spentAmount, false);\n        spentAmount = _market.rawToQuote(spentRawAmount);\n        IERC20(quoteToken).safeTransferFrom(msg.sender, address(this), spentAmount);\n        (uint16 priceIndex, uint256 orderAmount) = _calculateOrder(spentRawAmount, bonus);\n        if (availableAmount() < orderAmount) {\n            revert Errors.MangoError(Errors.INSUFFICIENT_BALANCE);\n        }\n        if (priceIndex > limitPriceIndex) {\n            revert Errors.MangoError(Errors.SLIPPAGE);\n        }\n        uint64 orderedRawAmount;\n        {\n            // post only\n            uint256 orderIndex = _market.limitOrder(address(this), priceIndex, 0, orderAmount, 2, new bytes(0));\n            if (orderIndex == type(uint256).max) {\n                // It represents order is not created b/c the orderAmount is too small.\n                revert Errors.MangoError(Errors.AMOUNT_TOO_SMALL);\n            }\n            OrderKey memory orderKey = OrderKey({isBid: false, priceIndex: priceIndex, orderIndex: orderIndex});\n            orderId = _orderNFT.encodeId(orderKey);\n            orderedRawAmount = _market.getOrder(orderKey).amount;\n        }\n        _bonds[orderId] = Bond({\n            spentRawAmount: spentRawAmount,\n            purchasedRawAmount: orderedRawAmount,\n            claimedRawAmount: 0,\n            canceledRawAmount: 0,\n            owner: to,\n            bonus: bonus,\n            isValid: true\n        });\n        uint256 underlyingAmount = _market.rawToBase(orderedRawAmount, priceIndex, false);\n        if (underlyingAmount == 0) {\n            // Check if the underlyingAmount is 0 due to the rounding calculation.\n            revert Errors.MangoError(Errors.AMOUNT_TOO_SMALL);\n        }\n        emit PurchaseBond(msg.sender, to, orderId, spentAmount, bonus, underlyingAmount);\n\n        _treasury.receiveToken(spentAmount);\n    }\n\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256,\n        bytes calldata\n    ) external payable {\n        if (msg.sender != address(_market)) {\n            revert Errors.MangoError(Errors.ACCESS);\n        }\n        if (!(inputToken == underlyingToken && outputToken == quoteToken)) {\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\n        }\n        IERC20(inputToken).safeTransfer(msg.sender, inputAmount);\n        soldAmount += inputAmount;\n    }\n\n    function claim(uint256[] calldata orderIds) public nonReentrant whenNotPaused {\n        for (uint256 i = 0; i < orderIds.length; ++i) {\n            uint256 claimedAmount;\n            uint256 orderId = orderIds[i];\n            Bond memory bond = _bonds[orderId];\n            if (!bond.isValid) {\n                continue;\n            }\n            OrderKey memory orderKey = _decodeOrderId(orderId);\n            claimedAmount += _unaccountedClaimedAmount(bond, orderKey);\n            uint256 beforeQuoteAmount = IERC20(quoteToken).balanceOf(address(this));\n            _market.claim(msg.sender, _toSingletonArray(orderKey));\n            claimedAmount += IERC20(quoteToken).balanceOf(address(this)) - beforeQuoteAmount;\n            if (claimedAmount > 0) {\n                IERC20(quoteToken).safeTransfer(bond.owner, claimedAmount);\n\n                uint64 remoteOrderRawAmount = _market.getOrder(orderKey).amount;\n                bond.claimedRawAmount = bond.purchasedRawAmount - remoteOrderRawAmount;\n                if (bond.purchasedRawAmount == bond.claimedRawAmount) {\n                    bond.isValid = false;\n                }\n                _bonds[orderId] = bond;\n            }\n        }\n    }\n\n    function breakBonds(uint256[] calldata orderIds) external nonReentrant whenNotPaused {\n        OrderKey[] memory orderKeys = new OrderKey[](orderIds.length);\n        for (uint256 i = 0; i < orderIds.length; ++i) {\n            uint256 orderId = orderIds[i];\n            Bond memory bond = _bonds[orderId];\n            if (bond.owner != msg.sender) {\n                revert Errors.MangoError(Errors.ACCESS);\n            }\n            OrderKey memory orderKey = _decodeOrderId(orderId);\n            orderKeys[i] = orderKey;\n            if (!bond.isValid) {\n                continue;\n            }\n            uint64 remoteOrderRawAmount = _market.getOrder(orderKey).amount;\n            (uint64 claimableRawAmount, , , ) = _market.getClaimable(orderKey);\n            bond.canceledRawAmount = remoteOrderRawAmount - claimableRawAmount;\n            bond.claimedRawAmount = bond.purchasedRawAmount - bond.canceledRawAmount;\n            bond.isValid = false;\n            _bonds[orderId] = bond;\n        }\n        uint256 beforeQuoteAmount = IERC20(quoteToken).balanceOf(address(this));\n        uint256 beforeUnderlyingAmount = IERC20(underlyingToken).balanceOf(address(this));\n        _market.cancel(address(this), orderKeys);\n        uint256 claimedQuoteAmount = IERC20(quoteToken).balanceOf(address(this)) - beforeQuoteAmount;\n        uint256 canceledUnderlyingAmount = IERC20(underlyingToken).balanceOf(address(this)) - beforeUnderlyingAmount;\n\n        uint256 cancelFeeAmount = _ceil(canceledUnderlyingAmount * cancelFee, _FEE_PRECISION);\n        IERC20(underlyingToken).safeTransfer(burnAddress, cancelFeeAmount);\n        IERC20(underlyingToken).safeTransfer(msg.sender, canceledUnderlyingAmount - cancelFeeAmount);\n        IERC20(quoteToken).safeTransfer(msg.sender, claimedQuoteAmount);\n    }\n\n    function withdrawLostERC20(address token, address to) external onlyOwner {\n        if (token == underlyingToken || token == quoteToken) {\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\n        }\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\n    }\n\n    function changeAvailableBonusRange(uint8 min, uint8 max) external onlyOwner {\n        _changeAvailableBonusRange(min, max);\n    }\n\n    function changePriceSampleSize(uint16 newSampleSize) external onlyOwner {\n        sampleSize = newSampleSize;\n    }\n\n    function _changeAvailableBonusRange(uint8 min, uint8 max) internal {\n        if (min > max) {\n            revert Errors.MangoError(Errors.INVALID_BONUS);\n        }\n        minBonus = min;\n        maxBonus = max;\n    }\n\n    function _decodeOrderId(uint256 orderId) internal view returns (OrderKey memory) {\n        return _orderNFT.decodeId(orderId);\n    }\n\n    function _ceil(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a + b - 1) / b;\n    }\n\n    function _toSingletonArray(OrderKey memory orderKey) internal pure returns (OrderKey[] memory arr) {\n        arr = new OrderKey[](1);\n        arr[0] = orderKey;\n    }\n\n    function withdrawExceededUnderlyingToken(address receiver) external onlyOwner {\n        uint256 exceededAmount = IERC20(underlyingToken).balanceOf(address(this)) + soldAmount - maxReleaseAmount;\n        IERC20(underlyingToken).safeTransfer(receiver, exceededAmount);\n    }\n}\n"
    },
    "contracts/MangoHost.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./clober/CloberMarketFactory.sol\";\nimport \"./interfaces/ICloberMarketHost.sol\";\nimport \"./utils/ReentrancyGuard.sol\";\n\ncontract MangoHost is ICloberMarketHost, Initializable, Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    CloberMarketFactory private immutable _marketFactory;\n    // token => receiver\n    mapping(address => address) public override tokenReceiver;\n\n    constructor(address marketFactory_) {\n        _marketFactory = CloberMarketFactory(marketFactory_);\n    }\n\n    function initialize(ITokenReceiver[] calldata receivers_) external initializer {\n        _initReentrancyGuard();\n        _transferOwnership(msg.sender);\n        for (uint256 i = 0; i < receivers_.length; ++i) {\n            ITokenReceiver receiver = receivers_[i];\n            address token = receiver.receivingToken();\n            tokenReceiver[token] = address(receiver);\n            setApprovals(token);\n        }\n    }\n\n    function setApprovals(address token) public {\n        address receiver = tokenReceiver[token];\n        if (receiver != address(0)) {\n            IERC20(token).safeApprove(receiver, 0);\n            IERC20(token).safeApprove(receiver, type(uint256).max);\n        }\n    }\n\n    function distributeTokens(address[] calldata tokenList) external {\n        for (uint256 i = 0; i < tokenList.length; ++i) {\n            address token = tokenList[i];\n            address receiver = tokenReceiver[token];\n            if (receiver == address(0)) {\n                continue;\n            }\n            uint256 amount = IERC20(token).balanceOf(address(this));\n            if (amount > 0) {\n                ITokenReceiver(receiver).receiveToken(amount);\n            }\n        }\n    }\n\n    function setTokenReceiver(ITokenReceiver receiver) external onlyOwner {\n        address token = receiver.receivingToken();\n        address oldReceiver = tokenReceiver[token];\n        if (oldReceiver != address(0)) {\n            IERC20(token).safeApprove(oldReceiver, 0);\n        }\n        tokenReceiver[token] = address(receiver);\n        emit SetTokenReceiver(token, address(receiver));\n\n        setApprovals(token);\n    }\n\n    function withdrawLostERC20(address token, address to) external onlyOwner {\n        if (tokenReceiver[token] != address(0)) {\n            revert Errors.MangoError(Errors.INVALID_ADDRESS);\n        }\n\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\n    }\n\n    function receiveHost(address market) external onlyOwner {\n        _marketFactory.executeHandOverHost(market);\n    }\n}\n"
    },
    "contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../Errors.sol\";\n\nabstract contract Pausable is Ownable {\n    bool public paused;\n\n    modifier whenNotPaused() {\n        if (paused) {\n            revert Errors.MangoError(Errors.PAUSED);\n        }\n        _;\n    }\n\n    function pause() external onlyOwner {\n        paused = true;\n    }\n\n    function unpause() external onlyOwner {\n        paused = false;\n    }\n}\n"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../Errors.sol\";\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Mango (https://github.com/mango/core/blob/main/contracts/ReentrancyGuard.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 internal _locked = 1;\n\n    modifier nonReentrant() virtual {\n        if (_locked != 1) {\n            revert Errors.MangoError(Errors.REENTRANCY);\n        }\n\n        _locked = 2;\n\n        _;\n\n        _locked = 1;\n    }\n\n    function _initReentrancyGuard() internal {\n        _locked = 1;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "london",
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}